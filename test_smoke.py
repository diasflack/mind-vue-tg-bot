#!/usr/bin/env python3
"""
Smoke test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.
"""

import sys
import logging
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫."""
    logger.info("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from src import bot, config
        from src.data import storage, encryption
        from src.handlers import entry, basic, stats, delete, notifications
        from src.utils import formatters, date_helpers, validation
        from src.analytics import pattern_detection
        # Note: analytics - —ç—Ç–æ –ø–∞–ø–∫–∞, –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –º–æ–¥—É–ª—å

        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_config_initialization():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    try:
        import src.config as config
        import os

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        # –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ BOT_TOKEN –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if not os.environ.get('TELEGRAM_BOT_TOKEN'):
            logger.warning("‚ö†Ô∏è BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        if hasattr(config, 'DATA_FOLDER') and hasattr(config, 'MOOD'):
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã)")
            return True
        else:
            logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_storage_initialization():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            import src.data.storage as storage

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            original_data_folder = storage.DATA_FOLDER
            original_db_file = storage.DB_FILE

            storage.DATA_FOLDER = temp_dir
            storage.DB_FILE = os.path.join(temp_dir, "test_mood_tracker.db")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            storage.initialize_storage()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ë–î —Å–æ–∑–¥–∞–Ω–∞
            if os.path.exists(storage.DB_FILE):
                logger.info("‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                result = True
            else:
                logger.error("‚ùå –ë–î –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                result = False

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            storage.DATA_FOLDER = original_data_folder
            storage.DB_FILE = original_db_file

            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            return False


def test_encryption():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        from src.data.encryption import encrypt_data, decrypt_data
        import src.config as config

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if not config.SECRET_SALT or not config.SYSTEM_SALT:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            config.SECRET_SALT = b'test_secret_salt_for_testing_purposes_only'
            config.SYSTEM_SALT = b'test_system_salt_for_testing_purposes_only'
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        test_data = {
            'mood': 7,
            'sleep': 8,
            'comment': 'Test comment',
            'date': '2025-01-20'
        }

        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        encrypted = encrypt_data(test_data, 12345)

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        decrypted = decrypt_data(encrypted, 12345)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        if decrypted['mood'] == test_data['mood'] and decrypted['comment'] == test_data['comment']:
            logger.info("‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_formatters():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤."""
    logger.info("üîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤...")

    try:
        from src.utils.formatters import format_entry_summary, format_date

        # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–∏—Å–∏
        test_entry = {
            'date': '2025-01-20',
            'mood': 7,
            'sleep': 8,
            'balance': 6,
            'mania': 4,
            'depression': 2,
            'anxiety': 3,
            'irritability': 3,
            'productivity': 7,
            'sociability': 6,
            'comment': 'Test'
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        summary = format_entry_summary(test_entry)
        date_str = format_date('2025-01-20')

        if summary and '7' in summary and date_str:
            logger.info("‚úÖ –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤: {e}")
        return False


def test_validation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    logger.info("üîç –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")

    try:
        from src.utils.validation import validate_numeric_input, validate_comment

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        is_valid, value = validate_numeric_input("7", min_val=1, max_val=10)
        if not (is_valid and value == 7):
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment = validate_comment("Test comment")
        if not comment:
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


def test_analytics():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    logger.info("üîç –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

    try:
        from src.analytics.pattern_detection import generate_insights, analyze_correlations

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–∏–Ω–∏–º—É–º 7 –∑–∞–ø–∏—Å–µ–π) —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π
        test_entries = [
            {
                'mood': 7 + (i % 3),
                'sleep': 8,
                'balance': 6,
                'mania': 4,
                'depression': 2,
                'anxiety': 3,
                'irritability': 3,
                'productivity': 7,
                'sociability': 6,
                'date': f'2025-01-{i+1:02d}'
            }
            for i in range(10)
        ]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
        insights = generate_insights(test_entries)

        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        correlations = analyze_correlations(test_entries)

        if insights['status'] == 'success' and correlations['status'] == 'success':
            logger.info("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: {insights.get('message', 'Unknown')}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False


def test_bot_application_creation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)."""
    logger.info("üîç –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")

    try:
        from src.bot import create_application

        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç BOT_TOKEN)
        # –≠—Ç–æ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        app = create_application()

        if app:
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç BOT_TOKEN)")
            return True  # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Ç–æ–∫–µ–Ω–∞, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if "BOT_TOKEN" in str(e) or "token" in str(e).lower():
            logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏)")
            return True
        else:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False


def run_smoke_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ smoke tests."""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ smoke tests –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
    logger.info("=" * 60)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config_initialization),
        ("–•—Ä–∞–Ω–∏–ª–∏—â–µ", test_storage_initialization),
        ("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", test_encryption),
        ("–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã", test_formatters),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è", test_validation),
        ("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", test_analytics),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_bot_application_creation),
    ]

    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{name}': {e}")
            results.append((name, False))
        logger.info("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 60)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{name:30} {status}")

    logger.info("=" * 60)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    logger.info("=" * 60)

    if passed == total:
        logger.info("üéâ –í—Å–µ smoke tests –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        logger.error(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ.")
        return 1


if __name__ == '__main__':
    sys.exit(run_smoke_tests())

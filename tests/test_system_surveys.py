"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ (Phase 2.3).
"""

import pytest
import sqlite3
import json
from src.data.system_surveys import (
    get_cbt_journal_template,
    get_addiction_journal_template,
    get_gratitude_journal_template,
    get_sleep_journal_template,
    load_system_surveys
)


def test_cbt_journal_template():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞ –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    template = get_cbt_journal_template()

    assert template['name'] == "–ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫"
    assert template['icon'] == "üß†"
    assert template['is_system'] is True
    assert 'description' in template

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
    questions = template['questions']
    assert len(questions) == 7

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    assert questions[0]['question_type'] == 'text'  # –°–∏—Ç—É–∞—Ü–∏—è
    assert questions[1]['question_type'] == 'text'  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏
    assert questions[2]['question_type'] == 'text'  # –≠–º–æ—Ü–∏–∏
    assert questions[3]['question_type'] == 'numeric'  # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–¥–æ)
    assert questions[4]['question_type'] == 'choice'  # –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
    assert questions[5]['question_type'] == 'text'  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å
    assert questions[6]['question_type'] == 'numeric'  # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é numeric –≤–æ–ø—Ä–æ—Å–∞
    config = json.loads(questions[3]['config'])
    assert config['min'] == 1
    assert config['max'] == 10

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é choice –≤–æ–ø—Ä–æ—Å–∞
    config = json.loads(questions[4]['config'])
    assert 'options' in config
    assert len(config['options']) >= 7
    assert '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è' in config['options']
    assert config['multiple'] is True


def test_addiction_journal_template():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    template = get_addiction_journal_template()

    assert template['name'] == "–î–Ω–µ–≤–Ω–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    assert template['icon'] == "üí™"
    assert template['is_system'] is True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
    questions = template['questions']
    assert len(questions) == 7

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    assert questions[0]['question_type'] == 'yes_no'  # –ë—ã–ª–æ –ª–∏ –≤–ª–µ—á–µ–Ω–∏–µ
    assert questions[1]['question_type'] == 'numeric'  # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–ª–µ—á–µ–Ω–∏—è
    assert questions[2]['question_type'] == 'choice'  # –¢—Ä–∏–≥–≥–µ—Ä—ã
    assert questions[3]['question_type'] == 'text'  # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–≤–ª–∞–¥–∞–Ω–∏—è
    assert questions[4]['question_type'] == 'yes_no'  # –ë—ã–ª–∏ –ª–∏ —Å—Ä—ã–≤—ã
    assert questions[5]['question_type'] == 'text'  # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ä—ã–≤–∞
    assert questions[6]['question_type'] == 'text'  # –ß—Ç–æ –¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é numeric –≤–æ–ø—Ä–æ—Å–∞
    config = json.loads(questions[1]['config'])
    assert config['min'] == 0
    assert config['max'] == 10

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é choice –≤–æ–ø—Ä–æ—Å–∞
    config = json.loads(questions[2]['config'])
    assert 'options' in config
    assert '–°—Ç—Ä–µ—Å—Å' in config['options']
    assert '–°–∫—É–∫–∞' in config['options']
    assert config['multiple'] is True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä—ã–≤–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    assert questions[5]['is_required'] is False


def test_gratitude_journal_template():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."""
    template = get_gratitude_journal_template()

    assert template['name'] == "–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"
    assert template['icon'] == "üôè"
    assert template['is_system'] is True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
    questions = template['questions']
    assert len(questions) == 3

    # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
    assert all(q['question_type'] == 'text' for q in questions)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    assert "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω" in questions[0]['question_text'].lower()
    assert "–∫—Ç–æ" in questions[1]['question_text'].lower()
    assert "—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ" in questions[2]['question_text'].lower()


def test_sleep_journal_template():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–∞."""
    template = get_sleep_journal_template()

    assert template['name'] == "–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–∞"
    assert template['icon'] == "üò¥"
    assert template['is_system'] is True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
    questions = template['questions']
    assert len(questions) == 6

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    assert questions[0]['question_type'] == 'time'  # –í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
    assert questions[1]['question_type'] == 'time'  # –í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    assert questions[2]['question_type'] == 'numeric'  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π
    assert questions[3]['question_type'] == 'numeric'  # –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
    assert questions[4]['question_type'] == 'yes_no'  # –ö–æ—à–º–∞—Ä—ã
    assert questions[5]['question_type'] == 'choice'  # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é numeric –≤–æ–ø—Ä–æ—Å–∞ (–∫–∞—á–µ—Å—Ç–≤–æ)
    config = json.loads(questions[3]['config'])
    assert config['min'] == 1
    assert config['max'] == 10

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é choice –≤–æ–ø—Ä–æ—Å–∞
    config = json.loads(questions[5]['config'])
    assert 'options' in config
    assert '–ß–∏—Ç–∞–ª' in config['options']
    assert '–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª' in config['options']
    assert config['multiple'] is True


@pytest.fixture
def temp_db():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    conn = sqlite3.connect(':memory:')
    conn.execute('PRAGMA foreign_keys = ON')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    conn.execute('''
        CREATE TABLE survey_templates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            is_system BOOLEAN DEFAULT 0,
            creator_chat_id INTEGER,
            icon TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1
        )
    ''')

    conn.execute('''
        CREATE TABLE survey_questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            template_id INTEGER NOT NULL,
            question_text TEXT NOT NULL,
            question_type TEXT NOT NULL,
            order_index INTEGER NOT NULL,
            is_required BOOLEAN DEFAULT 1,
            config TEXT,
            help_text TEXT,
            FOREIGN KEY (template_id) REFERENCES survey_templates(id) ON DELETE CASCADE
        )
    ''')

    conn.commit()
    yield conn
    conn.close()


def test_system_surveys_loaded(temp_db):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
    load_system_surveys(temp_db)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ 4 —à–∞–±–ª–æ–Ω–∞
    cursor = temp_db.execute("SELECT COUNT(*) FROM survey_templates WHERE is_system = 1")
    assert cursor.fetchone()[0] == 4

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤
    cursor = temp_db.execute("SELECT name FROM survey_templates WHERE is_system = 1")
    names = [row[0] for row in cursor.fetchall()]

    assert "–ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫" in names
    assert "–î–Ω–µ–≤–Ω–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏" in names
    assert "–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏" in names
    assert "–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–∞" in names

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã
    cursor = temp_db.execute("SELECT COUNT(*) FROM survey_questions")
    count = cursor.fetchone()[0]
    # –ö–ü–¢(7) + –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å(7) + –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å(3) + –°–æ–Ω(6) = 23
    assert count == 23


def test_system_surveys_idempotent(temp_db):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏."""
    # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    load_system_surveys(temp_db)

    cursor = temp_db.execute("SELECT COUNT(*) FROM survey_templates WHERE is_system = 1")
    count_first = cursor.fetchone()[0]

    # –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    load_system_surveys(temp_db)

    cursor = temp_db.execute("SELECT COUNT(*) FROM survey_templates WHERE is_system = 1")
    count_second = cursor.fetchone()[0]

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    assert count_first == count_second == 4


def test_system_survey_icons():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–æ–∫ —É –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤."""
    templates = [
        get_cbt_journal_template(),
        get_addiction_journal_template(),
        get_gratitude_journal_template(),
        get_sleep_journal_template()
    ]

    for template in templates:
        assert template['icon'] is not None
        assert len(template['icon']) > 0


def test_system_survey_descriptions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π —É –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤."""
    templates = [
        get_cbt_journal_template(),
        get_addiction_journal_template(),
        get_gratitude_journal_template(),
        get_sleep_journal_template()
    ]

    for template in templates:
        assert template['description'] is not None
        assert len(template['description']) > 0


def test_all_questions_have_order_index():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–º–µ—é—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä."""
    templates = [
        get_cbt_journal_template(),
        get_addiction_journal_template(),
        get_gratitude_journal_template(),
        get_sleep_journal_template()
    ]

    for template in templates:
        for i, question in enumerate(template['questions'], start=1):
            assert question['order_index'] == i


def test_config_fields_are_valid_json():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ config –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON."""
    templates = [
        get_cbt_journal_template(),
        get_addiction_journal_template(),
        get_gratitude_journal_template(),
        get_sleep_journal_template()
    ]

    for template in templates:
        for question in template['questions']:
            if question.get('config'):
                # –ù–µ –¥–æ–ª–∂–Ω–æ —É–ø–∞—Å—Ç—å
                config = json.loads(question['config'])
                assert isinstance(config, dict)

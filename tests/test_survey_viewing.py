"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã (Phase 2.6).
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update

from src.handlers.survey_viewing import (
    show_my_responses,
    show_survey_responses,
    _format_response_summary
)


@pytest.fixture
def mock_update():
    """–°–æ–∑–¥–∞–µ—Ç mock Update –æ–±—ä–µ–∫—Ç."""
    update = MagicMock(spec=Update)
    update.effective_chat.id = 123
    update.effective_user.id = 123
    update.message = AsyncMock()
    update.message.reply_text = AsyncMock()
    update.message.text = "test"
    return update


@pytest.fixture
def mock_context():
    """–°–æ–∑–¥–∞–µ—Ç mock Context –æ–±—ä–µ–∫—Ç."""
    context = MagicMock()
    context.user_data = {}
    context.args = []
    return context


@pytest.mark.asyncio
async def test_view_my_responses(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with patch('src.handlers.survey_viewing.get_user_survey_responses') as mock_get_responses:
        with patch('src.handlers.survey_viewing.get_template_by_id') as mock_get_template:
            with patch('src.handlers.survey_viewing._get_db_connection'):
                mock_get_responses.return_value = [
                    {
                        'id': 1,
                        'template_id': 1,
                        'response_date': '2025-01-15',
                        'response_time': '10:00:00',
                        'answers': {'1': 'Answer 1', '2': '8'}
                    },
                    {
                        'id': 2,
                        'template_id': 1,
                        'response_date': '2025-01-16',
                        'response_time': '11:00:00',
                        'answers': {'1': 'Answer 2', '2': '7'}
                    }
                ]

                mock_get_template.return_value = {
                    'id': 1,
                    'name': 'Test Survey',
                    'icon': 'üìù'
                }

                await show_my_responses(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_update.message.reply_text.assert_called()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–≤–µ—Ç–∞—Ö
    call_args = mock_update.message.reply_text.call_args
    message = call_args[0][0]
    assert '2025-01-15' in message or '15.01.2025' in message


@pytest.mark.asyncio
async def test_view_my_responses_empty(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤."""
    with patch('src.handlers.survey_viewing.get_user_survey_responses') as mock_get_responses:
        with patch('src.handlers.survey_viewing._get_db_connection'):
            mock_get_responses.return_value = []

            await show_my_responses(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_update.message.reply_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
    call_args = mock_update.message.reply_text.call_args
    message = call_args[0][0]
    assert '–Ω–µ—Ç' in message.lower() or '–Ω–µ –Ω–∞–π–¥–µ–Ω' in message.lower()


@pytest.mark.asyncio
async def test_view_responses_by_survey(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–ø—Ä–æ—Å—É."""
    mock_context.args = ['Test', 'Survey']

    with patch('src.handlers.survey_viewing.get_template_by_name') as mock_get_template:
        with patch('src.handlers.survey_viewing.get_responses_by_template') as mock_get_responses:
            with patch('src.handlers.survey_viewing.get_template_questions') as mock_get_questions:
                with patch('src.handlers.survey_viewing._get_db_connection'):
                    mock_get_template.return_value = {
                        'id': 1,
                        'name': 'Test Survey',
                        'icon': 'üìù'
                    }

                    mock_get_responses.return_value = [
                        {
                            'id': 1,
                            'template_id': 1,
                            'response_date': '2025-01-15',
                            'response_time': '10:00:00',
                            'answers': {'1': 'Answer 1'}
                        }
                    ]

                    mock_get_questions.return_value = [
                        {
                            'id': 1,
                            'question_text': 'Question 1',
                            'question_type': 'text'
                        }
                    ]

                    await show_survey_responses(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_update.message.reply_text.assert_called()


@pytest.mark.asyncio
async def test_view_responses_by_survey_not_found(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    mock_context.args = ['Nonexistent', 'Survey']

    with patch('src.handlers.survey_viewing.get_template_by_name') as mock_get_template:
        with patch('src.handlers.survey_viewing._get_db_connection'):
            mock_get_template.return_value = None

            await show_survey_responses(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_update.message.reply_text.assert_called_once()
    call_args = mock_update.message.reply_text.call_args
    message = call_args[0][0]
    assert '–Ω–µ –Ω–∞–π–¥–µ–Ω' in message.lower()


def test_format_response_summary():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–≤–µ—Ç–µ."""
    response = {
        'id': 1,
        'template_id': 1,
        'response_date': '2025-01-15',
        'response_time': '10:30:00',
        'answers': {'1': 'Answer 1', '2': 'Answer 2'}
    }

    template = {
        'name': 'Test Survey',
        'icon': 'üìù'
    }

    formatted = _format_response_summary(response, template)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    assert 'üìù' in formatted or 'Test Survey' in formatted
    assert '2025-01-15' in formatted or '15.01.2025' in formatted
    assert '10:30' in formatted


def test_format_response_summary_without_icon():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–¥–∞ —É —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç –∏–∫–æ–Ω–∫–∏."""
    response = {
        'id': 1,
        'template_id': 1,
        'response_date': '2025-01-15',
        'response_time': '10:30:00',
        'answers': {'1': 'Answer'}
    }

    template = {
        'name': 'Test Survey',
        'icon': None
    }

    formatted = _format_response_summary(response, template)

    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ
    assert 'Test Survey' in formatted
    assert '2025-01-15' in formatted or '15.01.2025' in formatted


@pytest.mark.asyncio
async def test_view_responses_pagination(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤."""
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
    many_responses = []
    for i in range(15):
        many_responses.append({
            'id': i,
            'template_id': 1,
            'response_date': '2025-01-15',
            'response_time': f'{10+i:02d}:00:00',
            'answers': {'1': f'Answer {i}'}
        })

    with patch('src.handlers.survey_viewing.get_user_survey_responses') as mock_get_responses:
        with patch('src.handlers.survey_viewing.get_template_by_id') as mock_get_template:
            with patch('src.handlers.survey_viewing._get_db_connection'):
                mock_get_responses.return_value = many_responses

                mock_get_template.return_value = {
                    'id': 1,
                    'name': 'Test Survey',
                    'icon': 'üìù'
                }

                await show_my_responses(mock_update, mock_context)

    # –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    assert mock_update.message.reply_text.call_count >= 1


@pytest.mark.asyncio
async def test_show_survey_responses_no_args(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    mock_context.args = []

    await show_survey_responses(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    mock_update.message.reply_text.assert_called_once()
    call_args = mock_update.message.reply_text.call_args
    message = call_args[0][0]
    assert '—É–∫–∞–∂–∏—Ç–µ' in message.lower() or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in message.lower()


@pytest.mark.asyncio
async def test_show_survey_responses_empty(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–ø—Ä–æ—Å."""
    mock_context.args = ['Test', 'Survey']

    with patch('src.handlers.survey_viewing.get_template_by_name') as mock_get_template:
        with patch('src.handlers.survey_viewing.get_responses_by_template') as mock_get_responses:
            with patch('src.handlers.survey_viewing._get_db_connection'):
                mock_get_template.return_value = {
                    'id': 1,
                    'name': 'Test Survey',
                    'icon': 'üìù'
                }

                mock_get_responses.return_value = []

                await show_survey_responses(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
    call_args = mock_update.message.reply_text.call_args
    message = call_args[0][0]
    assert '–Ω–µ—Ç' in message.lower() or '–Ω–µ –∑–∞–ø–æ–ª–Ω' in message.lower()

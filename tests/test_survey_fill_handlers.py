"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ (Phase 2.5).
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update
from telegram.ext import ConversationHandler

from src.handlers.survey_handlers import (
    list_surveys,
    start_fill_survey,
    handle_survey_answer,
    cancel_survey,
    survey_conversation_handler,
    _validate_answer
)
from src.config import SURVEY_ANSWER


@pytest.fixture
def mock_update():
    """–°–æ–∑–¥–∞–µ—Ç mock Update –æ–±—ä–µ–∫—Ç."""
    update = MagicMock(spec=Update)
    update.effective_chat.id = 123
    update.effective_user.id = 123
    update.message = AsyncMock()
    update.message.reply_text = AsyncMock()
    update.message.text = "test"
    return update


@pytest.fixture
def mock_context():
    """–°–æ–∑–¥–∞–µ—Ç mock Context –æ–±—ä–µ–∫—Ç."""
    context = MagicMock()
    context.user_data = {}
    context.args = []
    return context


@pytest.mark.asyncio
async def test_list_surveys_command(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /surveys - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤."""
    with patch('src.handlers.survey_handlers.get_available_templates') as mock_get_templates:
        with patch('src.handlers.survey_handlers._get_db_connection'):
            mock_get_templates.return_value = [
                {
                    'id': 1,
                    'name': 'Test Survey',
                    'description': 'Test Description',
                    'icon': 'üìù',
                    'is_system': True
                }
            ]

            await list_surveys(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_update.message.reply_text.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    call_args = mock_update.message.reply_text.call_args
    message = call_args[0][0]
    assert 'Test Survey' in message
    assert 'üìù' in message


@pytest.mark.asyncio
async def test_start_fill_survey_no_args(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ –æ–ø—Ä–æ—Å–∞."""
    mock_context.args = []

    result = await start_fill_survey(mock_update, mock_context)

    # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ConversationHandler.END
    assert result == ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    mock_update.message.reply_text.assert_called_once()


@pytest.mark.asyncio
async def test_start_fill_survey_valid(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    mock_context.args = ['Test', 'Survey']

    with patch('src.handlers.survey_handlers.get_template_by_name') as mock_by_name:
        with patch('src.handlers.survey_handlers.get_template_questions') as mock_questions:
            with patch('src.handlers.survey_handlers._get_db_connection'):
                with patch('src.handlers.survey_handlers.register_conversation'):
                    mock_by_name.return_value = {
                        'id': 1,
                        'name': 'Test Survey',
                        'description': 'Test Description'
                    }

                    mock_questions.return_value = [
                        {
                            'id': 1,
                            'question_text': 'What is your name?',
                            'question_type': 'text',
                            'order_index': 1,
                            'is_required': True,
                            'config': None,
                            'help_text': 'Enter your name'
                        }
                    ]

                    result = await start_fill_survey(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—Å—è
    assert result == SURVEY_ANSWER

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ context
    assert 'survey' in mock_context.user_data
    assert mock_context.user_data['survey']['template_id'] == 1


def test_validate_text_question():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    question = {
        'question_type': 'text',
        'is_required': True
    }

    # –í–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
    is_valid, error = _validate_answer("Some text", question)
    assert is_valid is True

    # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    is_valid, error = _validate_answer("", question)
    assert is_valid is False


def test_validate_numeric_question():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    question = {
        'question_type': 'numeric',
        'config': '{"min": 1, "max": 10}',
        'is_required': True
    }

    # –í–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
    is_valid, error = _validate_answer("5", question)
    assert is_valid is True

    # –ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    is_valid, error = _validate_answer("15", question)
    assert is_valid is False

    # –ù–µ —á–∏—Å–ª–æ
    is_valid, error = _validate_answer("abc", question)
    assert is_valid is False


def test_validate_yes_no_question():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é yes/no –≤–æ–ø—Ä–æ—Å–∞."""
    question = {
        'question_type': 'yes_no',
        'is_required': True
    }

    # –í–∞–ª–∏–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    for answer in ['–¥–∞', '–Ω–µ—Ç', 'yes', 'no', '–î–∞', 'NO']:
        is_valid, error = _validate_answer(answer, question)
        assert is_valid is True, f"Answer '{answer}' should be valid"

    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
    is_valid, error = _validate_answer("maybe", question)
    assert is_valid is False


def test_validate_time_question():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é time –≤–æ–ø—Ä–æ—Å–∞."""
    question = {
        'question_type': 'time',
        'is_required': True
    }

    # –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    for time in ['14:30', '08:00', '23:59', '0:00']:
        is_valid, error = _validate_answer(time, question)
        assert is_valid is True, f"Time '{time}' should be valid"

    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    for time in ['25:00', '14:60', '14-30', 'abc']:
        is_valid, error = _validate_answer(time, question)
        assert is_valid is False, f"Time '{time}' should be invalid"


def test_validate_choice_question():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é choice –≤–æ–ø—Ä–æ—Å–∞."""
    question = {
        'question_type': 'choice',
        'config': '{"options": ["Option 1", "Option 2", "Option 3"]}',
        'is_required': True
    }

    # –í–∞–ª–∏–¥–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É
    is_valid, error = _validate_answer("1", question)
    assert is_valid is True

    is_valid, error = _validate_answer("2", question)
    assert is_valid is True

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    is_valid, error = _validate_answer("1,2", question)
    assert is_valid is True

    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä
    is_valid, error = _validate_answer("5", question)
    assert is_valid is False


@pytest.mark.asyncio
async def test_cancel_survey(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞."""
    mock_context.user_data['survey'] = {
        'template_id': 1,
        'current_question': 1,
        'answers': {'1': 'some answer'}
    }

    with patch('src.handlers.survey_handlers.end_conversation'):
        result = await cancel_survey(mock_update, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
    assert result == ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã
    assert 'survey' not in mock_context.user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_update.message.reply_text.assert_called_once()


def test_conversation_handler_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ ConversationHandler —Å–æ–∑–¥–∞–Ω."""
    assert survey_conversation_handler is not None
    assert isinstance(survey_conversation_handler, ConversationHandler)


def test_states_defined_in_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ config."""
    from src.config import SURVEY_ANSWER

    assert SURVEY_ANSWER is not None
    assert isinstance(SURVEY_ANSWER, int)

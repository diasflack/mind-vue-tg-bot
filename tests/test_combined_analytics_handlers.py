"""
–¢–µ—Å—Ç—ã –¥–ª—è handlers –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (Phase 5.5).
"""

import pytest
import sqlite3
from unittest.mock import MagicMock, AsyncMock, patch
from datetime import datetime, timedelta

from src.handlers.combined_analytics_handlers import (
    combined_analytics_handler
)


@pytest.fixture
def temp_db(mock_config):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    conn = sqlite3.connect(':memory:')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE users (
            chat_id INTEGER PRIMARY KEY,
            username TEXT
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –¥–Ω—è
    cursor.execute('''
        CREATE TABLE entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            date TEXT NOT NULL,
            mood_score INTEGER,
            notes TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE impressions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            text TEXT NOT NULL,
            category TEXT CHECK(category IN ('positive', 'negative', 'neutral')),
            intensity INTEGER CHECK(intensity BETWEEN 1 AND 10),
            entry_date TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø—Ä–æ—Å–æ–≤
    cursor.execute('''
        CREATE TABLE survey_templates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            description TEXT,
            is_system BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã
    cursor.execute('''
        CREATE TABLE survey_responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            template_id INTEGER NOT NULL,
            answers TEXT NOT NULL,
            completed_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute('INSERT INTO users (chat_id, username) VALUES (?, ?)', (12345, 'testuser'))

    # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    today = datetime.now()
    for i in range(7):
        date = (today - timedelta(days=i)).strftime('%Y-%m-%d')
        cursor.execute('''
            INSERT INTO entries (chat_id, date, mood_score)
            VALUES (?, ?, ?)
        ''', (12345, date, 7 - i))

    # –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
    cursor.execute('''
        INSERT INTO impressions (chat_id, text, category, intensity, entry_date, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (12345, '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å', 'positive', 8, (today - timedelta(days=1)).strftime('%Y-%m-%d'),
          (today - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')))

    cursor.execute('''
        INSERT INTO impressions (chat_id, text, category, intensity, entry_date, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (12345, '–ü–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', 'negative', 6, (today - timedelta(days=2)).strftime('%Y-%m-%d'),
          (today - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S')))

    # –®–∞–±–ª–æ–Ω –æ–ø—Ä–æ—Å–∞
    cursor.execute('''
        INSERT INTO survey_templates (id, name, description, is_system, is_active)
        VALUES (1, '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', 1, 1)
    ''')

    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã
    cursor.execute('''
        INSERT INTO survey_responses (chat_id, template_id, answers, completed_at)
        VALUES (?, ?, ?, ?)
    ''', (12345, 1, '{"1": "8"}', (today - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')))

    cursor.execute('''
        INSERT INTO survey_responses (chat_id, template_id, answers, completed_at)
        VALUES (?, ?, ?, ?)
    ''', (12345, 1, '{"1": "4"}', (today - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S')))

    conn.commit()
    yield conn
    conn.close()


@pytest.fixture
def mock_update():
    """Mock –æ–±—ä–µ–∫—Ç Update."""
    update = MagicMock()
    update.effective_chat.id = 12345
    update.message = AsyncMock()
    return update


@pytest.fixture
def mock_context():
    """Mock –æ–±—ä–µ–∫—Ç Context."""
    context = MagicMock()
    context.args = []
    return context


class TestCombinedAnalyticsHandler:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã /combined_analytics."""

    @pytest.mark.asyncio
    async def test_combined_analytics_default(self, mock_update, mock_context, temp_db):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        with patch('src.handlers.combined_analytics_handlers._get_db_connection', return_value=temp_db):
            await combined_analytics_handler(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            mock_update.message.reply_text.assert_called_once()
            call_args = mock_update.message.reply_text.call_args[0][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            assert "üìä" in call_args or "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" in call_args or "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞" in call_args
            assert "7" in call_args or "–¥–Ω–µ–π" in call_args or "–¥–Ω—è" in call_args

    @pytest.mark.asyncio
    async def test_combined_analytics_custom_period(self, mock_update, mock_context, temp_db):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
        mock_context.args = ['--period', '14']

        with patch('src.handlers.combined_analytics_handlers._get_db_connection', return_value=temp_db):
            await combined_analytics_handler(mock_update, mock_context)

            mock_update.message.reply_text.assert_called_once()
            call_args = mock_update.message.reply_text.call_args[0][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–∏–æ–¥ —É—á—Ç–µ–Ω
            assert "14" in call_args or "–¥–Ω–µ–π" in call_args

    @pytest.mark.asyncio
    async def test_combined_analytics_no_data(self, temp_db):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö."""
        update = MagicMock()
        update.effective_chat.id = 99999
        update.message = AsyncMock()

        context = MagicMock()
        context.args = []

        with patch('src.handlers.combined_analytics_handlers._get_db_connection', return_value=temp_db):
            await combined_analytics_handler(update, context)

            update.message.reply_text.assert_called_once()
            call_args = update.message.reply_text.call_args[0][0]

            # –î–æ–ª–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            assert "–Ω–µ—Ç" in call_args.lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in call_args.lower() or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" in call_args.lower()

    @pytest.mark.asyncio
    async def test_combined_analytics_with_overview(self, mock_update, mock_context, temp_db):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–∑–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        with patch('src.handlers.combined_analytics_handlers._get_db_connection', return_value=temp_db):
            await combined_analytics_handler(mock_update, mock_context)

            call_args = mock_update.message.reply_text.call_args[0][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
            # (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)
            content_lower = call_args.lower()
            has_impressions = '–≤–ø–µ—á–∞—Ç–ª–µ–Ω' in content_lower or 'impression' in content_lower
            has_surveys = '–æ–ø—Ä–æ—Å' in content_lower or 'survey' in content_lower
            has_mood = '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' in content_lower or 'mood' in content_lower

            assert has_impressions or has_surveys or has_mood

    @pytest.mark.asyncio
    async def test_combined_analytics_formatting(self, mock_update, mock_context, temp_db):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞."""
        with patch('src.handlers.combined_analytics_handlers._get_db_connection', return_value=temp_db):
            await combined_analytics_handler(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
            assert mock_update.message.reply_text.call_args[1].get('parse_mode') == 'Markdown'

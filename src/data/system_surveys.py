"""
–ú–æ–¥—É–ª—å —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ–ø—Ä–æ—Å–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: –ö–ü–¢, –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, –°–æ–Ω.
"""

import logging
import json
import sqlite3
from typing import Dict, List, Any

logger = logging.getLogger(__name__)


def get_cbt_journal_template() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è).

    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    """
    return {
        'name': '–ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫',
        'description': '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º—ã—Å–ª—è–º–∏',
        'is_system': True,
        'icon': 'üß†',
        'questions': [
            {
                'question_text': '–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é',
                'question_type': 'text',
                'order_index': 1,
                'is_required': True,
                'help_text': '–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –ì–¥–µ? –ö–æ–≥–¥–∞? –° –∫–µ–º?'
            },
            {
                'question_text': '–ö–∞–∫–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?',
                'question_type': 'text',
                'order_index': 2,
                'is_required': True,
                'help_text': '–ß—Ç–æ –≤—ã –ø–æ–¥—É–º–∞–ª–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç?'
            },
            {
                'question_text': '–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏?',
                'question_type': 'text',
                'order_index': 3,
                'is_required': True,
                'help_text': '–ó–ª–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —Ç—Ä–µ–≤–æ–≥–∞, —Å—Ç—Ä–∞—Ö –∏ —Ç.–¥.'
            },
            {
                'question_text': '–û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–π (1-10)',
                'question_type': 'numeric',
                'order_index': 4,
                'is_required': True,
                'config': json.dumps({'min': 1, 'max': 10}),
                'help_text': '1 - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è'
            },
            {
                'question_text': '–ö–∞–∫–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏?',
                'question_type': 'choice',
                'order_index': 5,
                'is_required': True,
                'config': json.dumps({
                    'options': [
                        '–ß—ë—Ä–Ω–æ-–±–µ–ª–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
                        '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è',
                        '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
                        '–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π',
                        '–î–æ–ª–∂–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ',
                        '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è',
                        '–î—Ä—É–≥–æ–µ'
                    ],
                    'multiple': True
                }),
                'help_text': '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ'
            },
            {
                'question_text': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è, –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—ã—Å–ª—å',
                'question_type': 'text',
                'order_index': 6,
                'is_required': True,
                'help_text': '–ö–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –∏–Ω–∞—á–µ?'
            },
            {
                'question_text': '–ü–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–π —Å–µ–π—á–∞—Å (1-10)',
                'question_type': 'numeric',
                'order_index': 7,
                'is_required': True,
                'config': json.dumps({'min': 1, 'max': 10}),
                'help_text': '–ò–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–µ—Ñ—Ä–µ–π–º–∏–Ω–≥–∞?'
            }
        ]
    }


def get_addiction_journal_template() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    """
    return {
        'name': '–î–Ω–µ–≤–Ω–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
        'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–ª–µ—á–µ–Ω–∏—è, —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–æ–≤–ª–∞–¥–∞–Ω–∏—è',
        'is_system': True,
        'icon': 'üí™',
        'questions': [
            {
                'question_text': '–ë—ã–ª–æ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–ª–µ—á–µ–Ω–∏–µ?',
                'question_type': 'yes_no',
                'order_index': 1,
                'is_required': True,
                'help_text': '–û—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç'
            },
            {
                'question_text': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–ª–µ—á–µ–Ω–∏—è (0-10)',
                'question_type': 'numeric',
                'order_index': 2,
                'is_required': True,
                'config': json.dumps({'min': 0, 'max': 10}),
                'help_text': '0 - –Ω–µ –±—ã–ª–æ, 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ'
            },
            {
                'question_text': '–ß—Ç–æ —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞–ª–æ –≤–ª–µ—á–µ–Ω–∏–µ?',
                'question_type': 'choice',
                'order_index': 3,
                'is_required': True,
                'config': json.dumps({
                    'options': [
                        '–°—Ç—Ä–µ—Å—Å',
                        '–°–∫—É–∫–∞',
                        '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
                        '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ',
                        '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                        '–§–∏–∑–∏—á–µ—Å–∫–∏–π –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç',
                        '–î—Ä—É–≥–æ–µ'
                    ],
                    'multiple': True
                }),
                'help_text': '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤'
            },
            {
                'question_text': '–ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–º–æ–≥–ª–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è?',
                'question_type': 'text',
                'order_index': 4,
                'is_required': True,
                'help_text': '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–º–æ–≥–ª–æ'
            },
            {
                'question_text': '–ë—ã–ª–∏ –ª–∏ —Å—Ä—ã–≤—ã?',
                'question_type': 'yes_no',
                'order_index': 5,
                'is_required': True,
                'help_text': '–ß–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç'
            },
            {
                'question_text': '–ï—Å–ª–∏ –¥–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é',
                'question_type': 'text',
                'order_index': 6,
                'is_required': False,
                'help_text': '–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –ë–µ–∑ —Å–∞–º–æ–æ—Å—É–∂–¥–µ–Ω–∏—è'
            },
            {
                'question_text': '–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?',
                'question_type': 'text',
                'order_index': 7,
                'is_required': True,
                'help_text': '–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –±—É–¥—É—â–µ–µ'
            }
        ]
    }


def get_gratitude_journal_template() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–Ω–µ–≤–Ω–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏.

    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    """
    return {
        'name': '–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏',
        'description': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
        'is_system': True,
        'icon': 'üôè',
        'questions': [
            {
                'question_text': '–ó–∞ —á—Ç–æ —è –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω —Å–µ–≥–æ–¥–Ω—è? (3 –≤–µ—â–∏)',
                'question_type': 'text',
                'order_index': 1,
                'is_required': True,
                'help_text': '–ó–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º—É–º —Ç—Ä–∏ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã'
            },
            {
                'question_text': '–ö—Ç–æ —Å–¥–µ–ª–∞–ª –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ?',
                'question_type': 'text',
                'order_index': 2,
                'is_required': True,
                'help_text': '–õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–ª–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –≤–∞—Å'
            },
            {
                'question_text': '–ö–∞–∫–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ —è –ø–æ–ª—É—á–∏–ª —Å–µ–≥–æ–¥–Ω—è?',
                'question_type': 'text',
                'order_index': 3,
                'is_required': True,
                'help_text': '–í–∫—É—Å–Ω–∞—è –µ–¥–∞, –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç, –ø—Ä–∏—è—Ç–Ω–∞—è –º—É–∑—ã–∫–∞...'
            }
        ]
    }


def get_sleep_journal_template() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–∞.

    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    """
    return {
        'name': '–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–∞',
        'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–Ω–∞',
        'is_system': True,
        'icon': 'üò¥',
        'questions': [
            {
                'question_text': '–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ª–µ–≥–ª–∏ —Å–ø–∞—Ç—å?',
                'question_type': 'time',
                'order_index': 1,
                'is_required': True,
                'help_text': '–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 23:30'
            },
            {
                'question_text': '–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å?',
                'question_type': 'time',
                'order_index': 2,
                'is_required': True,
                'help_text': '–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 07:00'
            },
            {
                'question_text': '–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ—Å—ã–ø–∞–ª–∏—Å—å –Ω–æ—á—å—é?',
                'question_type': 'numeric',
                'order_index': 3,
                'is_required': True,
                'config': json.dumps({'min': 0, 'max': 20}),
                'help_text': '0 –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—ã–ø–∞–ª–∏—Å—å'
            },
            {
                'question_text': '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (1-10)',
                'question_type': 'numeric',
                'order_index': 4,
                'is_required': True,
                'config': json.dumps({'min': 1, 'max': 10}),
                'help_text': '1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ, 10 - –æ—Ç–ª–∏—á–Ω–æ–µ'
            },
            {
                'question_text': '–ë—ã–ª–∏ –ª–∏ –∫–æ—à–º–∞—Ä—ã?',
                'question_type': 'yes_no',
                'order_index': 5,
                'is_required': True,
                'help_text': '–û—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç'
            },
            {
                'question_text': '–ß—Ç–æ –¥–µ–ª–∞–ª–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?',
                'question_type': 'choice',
                'order_index': 6,
                'is_required': True,
                'config': json.dumps({
                    'options': [
                        '–ß–∏—Ç–∞–ª',
                        '–°–º–æ—Ç—Ä–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω',
                        '–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª',
                        '–°–º–æ—Ç—Ä–µ–ª –¢–í',
                        '–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª',
                        '–î—Ä—É–≥–æ–µ'
                    ],
                    'multiple': True
                }),
                'help_text': '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
            }
        ]
    }


def load_system_surveys(conn: sqlite3.Connection) -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ).

    Args:
        conn: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
    """
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    templates = [
        get_cbt_journal_template(),
        get_addiction_journal_template(),
        get_gratitude_journal_template(),
        get_sleep_journal_template()
    ]

    for template_data in templates:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –æ–ø—Ä–æ—Å
        cursor.execute("""
            SELECT id FROM survey_templates
            WHERE name = ? AND is_system = 1
        """, (template_data['name'],))

        existing = cursor.fetchone()

        if existing:
            logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –æ–ø—Ä–æ—Å '{template_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

        # –í—Å—Ç–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute("""
            INSERT INTO survey_templates (name, description, is_system, icon, is_active)
            VALUES (?, ?, 1, ?, 1)
        """, (
            template_data['name'],
            template_data['description'],
            template_data['icon']
        ))

        template_id = cursor.lastrowid
        logger.info(f"–°–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –æ–ø—Ä–æ—Å '{template_data['name']}' (ID: {template_id})")

        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for question in template_data['questions']:
            cursor.execute("""
                INSERT INTO survey_questions
                (template_id, question_text, question_type, order_index, is_required, config, help_text)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                template_id,
                question['question_text'],
                question['question_type'],
                question['order_index'],
                question['is_required'],
                question.get('config'),
                question.get('help_text')
            ))

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(template_data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è '{template_data['name']}'")

    conn.commit()
    logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


if __name__ == '__main__':
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)

    from src.data.storage import _get_db_connection

    conn = _get_db_connection()
    try:
        load_system_surveys(conn)
        print("–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

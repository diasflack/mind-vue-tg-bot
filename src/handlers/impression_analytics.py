"""
Handlers –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π (Phase 4.1).

–ö–æ–º–∞–Ω–¥—ã:
- /impression_analytics - –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π
"""

import logging
from datetime import datetime, timedelta
from collections import Counter, defaultdict
from typing import List, Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from src.data.impressions_storage import get_user_impressions

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
TIME_PERIODS = {
    'night': (0, 6),    # –ù–æ—á—å: 00:00-06:00
    'morning': (6, 12),  # –£—Ç—Ä–æ: 06:00-12:00
    'afternoon': (12, 18),  # –î–µ–Ω—å: 12:00-18:00
    'evening': (18, 24)  # –í–µ—á–µ—Ä: 18:00-24:00
}

TIME_PERIOD_NAMES = {
    'night': 'üåô –ù–æ—á—å',
    'morning': 'üåÖ –£—Ç—Ä–æ',
    'afternoon': '‚òÄÔ∏è –î–µ–Ω—å',
    'evening': 'üåÜ –í–µ—á–µ—Ä'
}

CATEGORY_EMOJI = {
    'positive': 'üòä',
    'negative': 'üòî',
    'neutral': 'üòê'
}

CATEGORY_NAMES = {
    'positive': '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ',
    'negative': '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ',
    'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ'
}

WEEKDAY_NAMES = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']


def parse_analytics_args(args: List[str]) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:
    - --period N: –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    - --from DATE --to DATE: –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    - --category CATEGORY: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - --detailed: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    parsed = {
        'period_days': 7,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
        'date_from': None,
        'date_to': None,
        'category': None,
        'detailed': False
    }

    i = 0
    while i < len(args):
        arg = args[i]

        if arg == '--period' and i + 1 < len(args):
            try:
                parsed['period_days'] = int(args[i + 1])
                i += 2
            except ValueError:
                i += 1

        elif arg == '--from' and i + 1 < len(args):
            parsed['date_from'] = args[i + 1]
            i += 2

        elif arg == '--to' and i + 1 < len(args):
            parsed['date_to'] = args[i + 1]
            i += 2

        elif arg == '--category' and i + 1 < len(args):
            parsed['category'] = args[i + 1]
            i += 2

        elif arg == '--detailed':
            parsed['detailed'] = True
            i += 1

        else:
            i += 1

    return parsed


def filter_impressions_by_period(
    impressions: List[Dict],
    period_days: Optional[int] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None
) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É."""
    if not impressions:
        return []

    now = datetime.now()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    if date_from and date_to:
        try:
            start_date = datetime.strptime(date_from, '%Y-%m-%d')
            end_date = datetime.strptime(date_to, '%Y-%m-%d').replace(hour=23, minute=59, second=59)
        except ValueError:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º period_days
            start_date = now - timedelta(days=period_days or 7)
            end_date = now
    else:
        start_date = now - timedelta(days=period_days or 7)
        end_date = now

    # –§–∏–ª—å—Ç—Ä—É–µ–º
    filtered = []
    for imp in impressions:
        try:
            created_at = datetime.strptime(imp['created_at'], '%Y-%m-%d %H:%M:%S')
            if start_date <= created_at <= end_date:
                filtered.append(imp)
        except (ValueError, KeyError):
            continue

    return filtered


def calculate_category_stats(impressions: List[Dict]) -> Dict[str, Dict[str, Any]]:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    stats = defaultdict(lambda: {'count': 0, 'intensities': []})

    for imp in impressions:
        category = imp.get('category', 'neutral')
        stats[category]['count'] += 1

        intensity = imp.get('intensity')
        if intensity is not None:
            stats[category]['intensities'].append(intensity)

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    for category, data in stats.items():
        if data['intensities']:
            data['avg_intensity'] = sum(data['intensities']) / len(data['intensities'])
        else:
            data['avg_intensity'] = 0

    return dict(stats)


def calculate_tag_frequency(impressions: List[Dict]) -> List[tuple]:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É —Ç–µ–≥–æ–≤."""
    all_tags = []

    for imp in impressions:
        tags = imp.get('tags', [])
        if tags:
            all_tags.extend(tags)

    tag_counter = Counter(all_tags)
    return tag_counter.most_common(10)  # –¢–æ–ø 10 —Ç–µ–≥–æ–≤


def calculate_time_of_day_distribution(impressions: List[Dict]) -> Dict[str, int]:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
    distribution = {period: 0 for period in TIME_PERIODS.keys()}

    for imp in impressions:
        try:
            created_at = datetime.strptime(imp['created_at'], '%Y-%m-%d %H:%M:%S')
            hour = created_at.hour

            for period, (start_hour, end_hour) in TIME_PERIODS.items():
                if start_hour <= hour < end_hour:
                    distribution[period] += 1
                    break
        except (ValueError, KeyError):
            continue

    return distribution


def calculate_weekday_distribution(impressions: List[Dict]) -> Dict[int, int]:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."""
    distribution = defaultdict(int)

    for imp in impressions:
        try:
            created_at = datetime.strptime(imp['created_at'], '%Y-%m-%d %H:%M:%S')
            weekday = created_at.weekday()  # 0=Monday, 6=Sunday
            distribution[weekday] += 1
        except (ValueError, KeyError):
            continue

    return dict(distribution)


def calculate_intensity_trend(impressions: List[Dict]) -> List[float]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."""
    if not impressions:
        return []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    sorted_impressions = sorted(
        impressions,
        key=lambda x: x.get('created_at', '')
    )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    intensities = [
        imp.get('intensity', 0)
        for imp in sorted_impressions
        if imp.get('intensity') is not None
    ]

    return intensities


def format_analytics_message(
    impressions: List[Dict],
    category_stats: Dict,
    tag_frequency: List[tuple],
    time_distribution: Dict,
    weekday_distribution: Dict,
    intensities: List[float],
    args: Dict[str, Any]
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
    if not impressions:
        return (
            "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π*\n\n"
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è: /impression"
        )

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    period_text = f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ {args['period_days']} –¥–Ω–µ–π"
    if args.get('date_from') and args.get('date_to'):
        period_text = f"{args['date_from']} ‚Äî {args['date_to']}"

    message = [
        "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π*",
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}",
        ""
    ]

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_count = len(impressions)
    all_intensities = [imp.get('intensity', 0) for imp in impressions if imp.get('intensity') is not None]
    avg_intensity = sum(all_intensities) / len(all_intensities) if all_intensities else 0

    message.extend([
        "*üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*",
        f"‚Ä¢ –í—Å–µ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π: *{total_count}*",
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: *{avg_intensity:.1f}/10*",
        ""
    ])

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if category_stats:
        message.append("*üé≠ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*")

        for category in ['positive', 'negative', 'neutral']:
            if category in category_stats:
                stats = category_stats[category]
                emoji = CATEGORY_EMOJI.get(category, '‚Ä¢')
                name = CATEGORY_NAMES.get(category, category)
                count = stats['count']
                avg = stats['avg_intensity']
                percentage = (count / total_count * 100) if total_count > 0 else 0

                message.append(
                    f"{emoji} {name}: *{count}* ({percentage:.0f}%) ‚Äî "
                    f"–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {avg:.1f}"
                )

        message.append("")

    # –¢–æ–ø —Ç–µ–≥–æ–≤
    if tag_frequency:
        message.append("*üè∑ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:*")
        for tag, count in tag_frequency[:5]:
            message.append(f"‚Ä¢ #{tag}: *{count}*")
        message.append("")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    if args.get('detailed') and time_distribution:
        message.append("*üïê –í—Ä–µ–º—è —Å—É—Ç–æ–∫:*")
        for period in ['morning', 'afternoon', 'evening', 'night']:
            count = time_distribution.get(period, 0)
            if count > 0:
                name = TIME_PERIOD_NAMES.get(period, period)
                percentage = (count / total_count * 100) if total_count > 0 else 0
                message.append(f"{name}: *{count}* ({percentage:.0f}%)")
        message.append("")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    if args.get('detailed') and weekday_distribution:
        message.append("*üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*")
        for weekday in range(7):
            count = weekday_distribution.get(weekday, 0)
            if count > 0:
                day_name = WEEKDAY_NAMES[weekday]
                message.append(f"{day_name}: *{count}*")
        message.append("")

    # –¢—Ä–µ–Ω–¥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    if intensities and len(intensities) >= 2:
        first_half = intensities[:len(intensities) // 2]
        second_half = intensities[len(intensities) // 2:]

        avg_first = sum(first_half) / len(first_half) if first_half else 0
        avg_second = sum(second_half) / len(second_half) if second_half else 0

        trend_diff = avg_second - avg_first

        message.append("*üìä –î–∏–Ω–∞–º–∏–∫–∞:*")
        if trend_diff > 0.5:
            message.append(f"üìà –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥ (+{trend_diff:.1f})")
        elif trend_diff < -0.5:
            message.append(f"üìâ –°–Ω–∏–∂–∞—é—â–∏–π—Å—è —Ç—Ä–µ–Ω–¥ ({trend_diff:.1f})")
        else:
            message.append("‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")
        message.append("")

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏
    message.extend([
        "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏:_",
        "_‚Ä¢ --period N (–¥–Ω–∏)_",
        "_‚Ä¢ --detailed (–¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)_",
        "_‚Ä¢ --category positive/negative/neutral_"
    ])

    return "\n".join(message)


async def show_impression_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º - /impression_analytics.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - --period N: –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    - --from DATE --to DATE: –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    - --category CATEGORY: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - --detailed: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    chat_id = update.effective_chat.id

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = parse_analytics_args(context.args)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from src.data.storage import _get_db_connection
        conn = _get_db_connection()

        all_impressions = get_user_impressions(conn, chat_id)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        impressions = filter_impressions_by_period(
            all_impressions,
            period_days=args['period_days'],
            date_from=args.get('date_from'),
            date_to=args.get('date_to')
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        if args.get('category'):
            impressions = [
                imp for imp in impressions
                if imp.get('category') == args['category']
            ]

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        category_stats = calculate_category_stats(impressions)
        tag_frequency = calculate_tag_frequency(impressions)
        time_distribution = calculate_time_of_day_distribution(impressions)
        weekday_distribution = calculate_weekday_distribution(impressions)
        intensities = calculate_intensity_trend(impressions)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_analytics_message(
            impressions,
            category_stats,
            tag_frequency,
            time_distribution,
            weekday_distribution,
            intensities,
            args
        )

        await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def register(application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π."""
    application.add_handler(CommandHandler('impression_analytics', show_impression_analytics))

    logger.info("Impression analytics handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

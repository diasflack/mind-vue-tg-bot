"""
Handlers –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (Phase 5.4).

–ö–æ–º–∞–Ω–¥—ã:
- /export_impressions [--format csv|json] [--from DATE] [--to DATE]
- /export_surveys <–Ω–∞–∑–≤–∞–Ω–∏–µ> [--format csv|json] [--from DATE] [--to DATE]
- /export_all - —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON
"""

import logging
from datetime import datetime
from io import BytesIO
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from src.data.storage import _get_db_connection
from src.data.export import (
    export_impressions_csv,
    export_impressions_json,
    export_survey_responses_csv,
    export_survey_responses_json,
    export_all_data_json
)

logger = logging.getLogger(__name__)


def parse_export_args(args: list) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞.

    Args:
        args: —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

    Returns:
        dict: —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {format, from_date, to_date, survey_name}
    """
    params = {
        'format': 'csv',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CSV
        'from_date': None,
        'to_date': None,
        'survey_name': None
    }

    i = 0
    while i < len(args):
        arg = args[i]

        if arg == '--format' and i + 1 < len(args):
            params['format'] = args[i + 1].lower()
            i += 2
        elif arg == '--from' and i + 1 < len(args):
            params['from_date'] = args[i + 1]
            i += 2
        elif arg == '--to' and i + 1 < len(args):
            params['to_date'] = args[i + 1]
            i += 2
        else:
            # –ï—Å–ª–∏ –Ω–µ —Ñ–ª–∞–≥, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
            if not arg.startswith('--'):
                params['survey_name'] = arg
            i += 1

    return params


async def export_impressions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - /export_impressions.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        --format csv|json: —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é csv)
        --from DATE: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
        --to DATE: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
    """
    chat_id = update.effective_chat.id

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    params = parse_export_args(context.args)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if params['format'] not in ['csv', 'json']:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: csv, json\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export_impressions [--format csv|json] [--from DATE] [--to DATE]"
        )
        return

    try:
        conn = _get_db_connection()

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if params['format'] == 'csv':
            data = export_impressions_csv(
                conn,
                chat_id=chat_id,
                from_date=params['from_date'],
                to_date=params['to_date']
            )
            filename = f"impressions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            mime_type = 'text/csv'
        else:  # json
            data = export_impressions_json(
                conn,
                chat_id=chat_id,
                from_date=params['from_date'],
                to_date=params['to_date']
            )
            filename = f"impressions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            mime_type = 'application/json'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not data or (params['format'] == 'csv' and data.count('\n') <= 1):
            await update.message.reply_text(
                "‚ÑπÔ∏è –ù–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é /add_impression"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_bytes = BytesIO(data.encode('utf-8'))
        file_bytes.name = filename

        await update.message.reply_document(
            document=file_bytes,
            filename=filename,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π ({params['format'].upper()})"
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –≤ {params['format']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def export_surveys_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–ø—Ä–æ—Å - /export_surveys.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        <–Ω–∞–∑–≤–∞–Ω–∏–µ>: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        --format csv|json: —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é csv)
        --from DATE: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
        --to DATE: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
    """
    chat_id = update.effective_chat.id

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    params = parse_export_args(context.args)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    if not params['survey_name']:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export_surveys <–Ω–∞–∑–≤–∞–Ω–∏–µ> [--format csv|json] [--from DATE] [--to DATE]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /export_surveys –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ --format json"
        )
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if params['format'] not in ['csv', 'json']:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: csv, json"
        )
        return

    try:
        conn = _get_db_connection()

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if params['format'] == 'csv':
            data = export_survey_responses_csv(
                conn,
                chat_id=chat_id,
                survey_name=params['survey_name'],
                from_date=params['from_date'],
                to_date=params['to_date']
            )
        else:  # json
            data = export_survey_responses_json(
                conn,
                chat_id=chat_id,
                survey_name=params['survey_name'],
                from_date=params['from_date'],
                to_date=params['to_date']
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω
        if data is None:
            await update.message.reply_text(
                f"‚ùå –û–ø—Ä–æ—Å '{params['survey_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not data or (params['format'] == 'csv' and data.count('\n') <= 1):
            await update.message.reply_text(
                f"‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å '{params['survey_name']}' –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n"
                f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é /fill_survey"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        safe_name = params['survey_name'].replace(' ', '_')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

        if params['format'] == 'csv':
            filename = f"survey_{safe_name}_{timestamp}.csv"
            mime_type = 'text/csv'
        else:
            filename = f"survey_{safe_name}_{timestamp}.json"
            mime_type = 'application/json'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_bytes = BytesIO(data.encode('utf-8'))
        file_bytes.name = filename

        await update.message.reply_document(
            document=file_bytes,
            filename=filename,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–ø—Ä–æ—Å–∞ '{params['survey_name']}' ({params['format'].upper()})"
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –æ–ø—Ä–æ—Å '{params['survey_name']}' –≤ {params['format']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def export_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON - /export_all.

    –í–∫–ª—é—á–∞–µ—Ç:
    - –ó–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
    - –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
    - –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    """
    chat_id = update.effective_chat.id

    try:
        conn = _get_db_connection()

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = export_all_data_json(conn, chat_id=chat_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"mindvue_all_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_bytes = BytesIO(data.encode('utf-8'))
        file_bytes.name = filename

        await update.message.reply_document(
            document=file_bytes,
            filename=filename,
            caption=(
                "üì¶ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                "–í–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞\n"
                "‚Ä¢ –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã\n\n"
                "–§–æ—Ä–º–∞—Ç: JSON"
            )
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def register(application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
    application.add_handler(CommandHandler('export_impressions', export_impressions_handler))
    application.add_handler(CommandHandler('export_surveys', export_surveys_handler))
    application.add_handler(CommandHandler('export_all', export_all_handler))

    logger.info("Export handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

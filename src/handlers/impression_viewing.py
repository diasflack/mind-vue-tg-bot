"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.
"""

import logging
from datetime import datetime
from typing import Dict, List, Any
from telegram import Update
from telegram.ext import ContextTypes, Application, CommandHandler

from src.data.storage import _get_db_connection
from src.data.impressions_storage import get_user_impressions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
MAX_IMPRESSIONS_PER_MESSAGE = 10

# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
CATEGORY_NAMES = {
    'craving': '–í–ª–µ—á–µ–Ω–∏–µ/–¢—è–≥–∞',
    'emotion': '–≠–º–æ—Ü–∏—è',
    'physical': '–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    'thoughts': '–ú—ã—Å–ª–∏',
    'other': '–î—Ä—É–≥–æ–µ'
}


def _format_impression(impression: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        impression: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è

    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –í—Ä–µ–º—è –±–µ–∑ —Å–µ–∫—É–Ω–¥
    time_str = impression['impression_time'][:5]  # HH:MM

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = f"‚è∞ {time_str}\n"
    text += f"üìù {impression['impression_text']}\n"

    # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if impression.get('intensity'):
        text += f"üî• –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {impression['intensity']}/10\n"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if impression.get('category'):
        category_ru = CATEGORY_NAMES.get(impression['category'], impression['category'])
        text += f"üìÇ {category_ru}\n"

    # –¢–µ–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if impression.get('tags') and len(impression['tags']) > 0:
        tags_str = " ".join([f"#{tag['tag_name']}" for tag in impression['tags']])
        text += f"üè∑Ô∏è {tags_str}\n"

    return text


async def show_today_impressions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.

    –ö–æ–º–∞–Ω–¥–∞: /impressions
    """
    chat_id = update.effective_chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    conn = _get_db_connection()

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    today = datetime.now().strftime('%Y-%m-%d')

    # –ü–æ–ª—É—á–∞–µ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Ç–µ–≥–∞–º–∏
    impressions = get_user_impressions(
        conn,
        chat_id,
        date=today,
        include_tags=True
    )

    if not impressions:
        await update.message.reply_text(
            "üìù –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /impression"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: –ø—É—Å—Ç–æ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìù –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(impressions)})\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ
    for i, impression in enumerate(impressions, 1):
        message += f"‚îÅ‚îÅ‚îÅ {i} ‚îÅ‚îÅ‚îÅ\n"
        message += _format_impression(impression)
        message += "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(message) > 3500 and i < len(impressions):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message)
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            message = f"üìù –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(message)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(impressions)} —à—Ç.")


async def show_impressions_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.

    –ö–æ–º–∞–Ω–¥–∞: /impressions_history

    –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±—É–¥—É—â–µ–º —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã.
    """
    chat_id = update.effective_chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    conn = _get_db_connection()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏
    impressions = get_user_impressions(
        conn,
        chat_id,
        include_tags=True
    )

    if not impressions:
        await update.message.reply_text(
            "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /impression"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π: –ø—É—Å—Ç–æ")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    impressions_by_date = {}
    for imp in impressions:
        date = imp['impression_date']
        if date not in impressions_by_date:
            impressions_by_date[date] = []
        impressions_by_date[date].append(imp)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π\n"
    message += f"–í—Å–µ–≥–æ: {len(impressions)} –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –∑–∞ {len(impressions_by_date)} –¥–Ω–µ–π\n\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    sorted_dates = sorted(impressions_by_date.keys(), reverse=True)

    count = 0
    for date in sorted_dates:
        date_impressions = impressions_by_date[date]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_obj = datetime.strptime(date, '%Y-%m-%d')
        date_formatted = date_obj.strftime('%d.%m.%Y')

        message += f"üìÖ {date_formatted} ({len(date_impressions)})\n"

        for impression in date_impressions:
            message += _format_impression(impression)
            message += "---\n"

            count += 1

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if count >= MAX_IMPRESSIONS_PER_MESSAGE:
                message += f"\n... –∏ –µ—â–µ {len(impressions) - count} –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π\n"
                message += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /impressions"
                break

        message += "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 3500:
            await update.message.reply_text(message)
            message = "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n"

        if count >= MAX_IMPRESSIONS_PER_MESSAGE:
            break

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(message) > 50:  # –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
        await update.message.reply_text(message)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π: {len(impressions)} —à—Ç.")


def register(application: Application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    application.add_handler(CommandHandler('impressions', show_today_impressions))
    application.add_handler(CommandHandler('impressions_history', show_impressions_history))

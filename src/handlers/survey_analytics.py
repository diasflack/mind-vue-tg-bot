"""
Handlers –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ (Phase 4.2).

–ö–æ–º–∞–Ω–¥—ã:
- /survey_stats <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –æ–ø—Ä–æ—Å—É
"""

import logging
import json
from datetime import datetime, timedelta
from collections import Counter, defaultdict
from typing import List, Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from src.data.storage import _get_db_connection
from src.data.surveys_storage import (
    get_available_templates,
    get_template_questions,
    get_user_survey_responses
)

logger = logging.getLogger(__name__)


def parse_survey_args(args: List[str]) -> tuple:
    """
    –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤.

    Returns:
        (survey_name, options_dict)
    """
    if not args:
        return None, {}

    # –ò—â–µ–º —Ñ–ª–∞–≥–∏
    flags = {}
    name_parts = []

    i = 0
    while i < len(args):
        if args[i] == '--period' and i + 1 < len(args):
            try:
                flags['period_days'] = int(args[i + 1])
                i += 2
            except ValueError:
                i += 1
        else:
            name_parts.append(args[i])
            i += 1

    survey_name = ' '.join(name_parts) if name_parts else None
    flags.setdefault('period_days', 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π

    return survey_name, flags


def filter_responses_by_period(responses: List[Dict], period_days: int) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É."""
    if not responses or not period_days:
        return responses

    cutoff_date = datetime.now() - timedelta(days=period_days)

    filtered = []
    for resp in responses:
        try:
            completed_at = datetime.strptime(resp['completed_at'], '%Y-%m-%d %H:%M:%S')
            if completed_at >= cutoff_date:
                filtered.append(resp)
        except (ValueError, KeyError):
            continue

    return filtered


def analyze_numeric_question(
    question: Dict,
    responses: List[Dict]
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å."""
    question_id = str(question['id'])
    values = []

    for resp in responses:
        answers = resp.get('answers', {})
        if question_id in answers:
            try:
                value = float(answers[question_id])
                values.append(value)
            except (ValueError, TypeError):
                continue

    if not values:
        return {'count': 0}

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'count': len(values),
        'avg': sum(values) / len(values),
        'min': min(values),
        'max': max(values),
        'values': values
    }

    # –¢—Ä–µ–Ω–¥ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)
    if len(values) >= 4:
        mid = len(values) // 2
        first_half_avg = sum(values[:mid]) / mid
        second_half_avg = sum(values[mid:]) / (len(values) - mid)
        trend_diff = second_half_avg - first_half_avg

        if trend_diff > 0.5:
            stats['trend'] = '—Ä–∞—Å—Ç—É—â–∏–π'
            stats['trend_emoji'] = 'üìà'
        elif trend_diff < -0.5:
            stats['trend'] = '—Å–Ω–∏–∂–∞—é—â–∏–π—Å—è'
            stats['trend_emoji'] = 'üìâ'
        else:
            stats['trend'] = '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π'
            stats['trend_emoji'] = '‚û°Ô∏è'
    else:
        stats['trend'] = '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
        stats['trend_emoji'] = '‚ùì'

    return stats


def analyze_choice_question(
    question: Dict,
    responses: List[Dict]
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º."""
    question_id = str(question['id'])
    all_choices = []

    for resp in responses:
        answers = resp.get('answers', {})
        if question_id in answers:
            answer = answers[question_id]
            # –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            if ',' in answer:
                choices = [c.strip() for c in answer.split(',')]
                all_choices.extend(choices)
            else:
                all_choices.append(answer.strip())

    if not all_choices:
        return {'count': 0}

    # –ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–±–æ—Ä–∞
    choice_counter = Counter(all_choices)
    total_responses = len([r for r in responses if question_id in r.get('answers', {})])

    stats = {
        'count': total_responses,
        'total_choices': len(all_choices),
        'choices': []
    }

    for choice, count in choice_counter.most_common():
        percentage = (count / total_responses * 100) if total_responses > 0 else 0
        stats['choices'].append({
            'text': choice,
            'count': count,
            'percentage': percentage
        })

    return stats


def analyze_yes_no_question(
    question: Dict,
    responses: List[Dict]
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç yes/no –≤–æ–ø—Ä–æ—Å."""
    question_id = str(question['id'])
    yes_count = 0
    no_count = 0

    for resp in responses:
        answers = resp.get('answers', {})
        if question_id in answers:
            answer = answers[question_id].lower()
            if answer in ['–¥–∞', 'yes', 'y']:
                yes_count += 1
            elif answer in ['–Ω–µ—Ç', 'no', 'n']:
                no_count += 1

    total = yes_count + no_count

    return {
        'count': total,
        'yes_count': yes_count,
        'no_count': no_count,
        'yes_percentage': (yes_count / total * 100) if total > 0 else 0,
        'no_percentage': (no_count / total * 100) if total > 0 else 0
    }


def detect_cbt_pattern(questions: List[Dict]) -> Optional[tuple]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–≤–æ–ø—Ä–æ—Å—ã '–¥–æ' –∏ '–ø–æ—Å–ª–µ').

    Returns:
        (before_question_id, after_question_id) –∏–ª–∏ None
    """
    before_q = None
    after_q = None

    for q in questions:
        text = q.get('question_text', '').lower()
        if '(–¥–æ)' in text or '–¥–æ' in text and ('–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω' in text or '—É—Ä–æ–≤–µ–Ω—å' in text):
            before_q = q
        elif '(–ø–æ—Å–ª–µ)' in text or '–ø–æ—Å–ª–µ' in text and ('–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω' in text or '—É—Ä–æ–≤–µ–Ω—å' in text):
            after_q = q

    if before_q and after_q:
        return (str(before_q['id']), str(after_q['id']))

    return None


def analyze_cbt_before_after(
    before_q_id: str,
    after_q_id: str,
    responses: List[Dict]
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –ö–ü–¢: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ."""
    before_values = []
    after_values = []
    improvements = []

    for resp in responses:
        answers = resp.get('answers', {})
        if before_q_id in answers and after_q_id in answers:
            try:
                before = float(answers[before_q_id])
                after = float(answers[after_q_id])
                before_values.append(before)
                after_values.append(after)
                improvements.append(before - after)
            except (ValueError, TypeError):
                continue

    if not before_values:
        return {'count': 0}

    avg_before = sum(before_values) / len(before_values)
    avg_after = sum(after_values) / len(after_values)
    avg_improvement = sum(improvements) / len(improvements)

    return {
        'count': len(before_values),
        'avg_before': avg_before,
        'avg_after': avg_after,
        'avg_improvement': avg_improvement,
        'improvement_percentage': (avg_improvement / avg_before * 100) if avg_before > 0 else 0
    }


def detect_addiction_pattern(questions: List[Dict]) -> Optional[tuple]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

    Returns:
        (craving_question_id, relapse_question_id) –∏–ª–∏ None
    """
    craving_q = None
    relapse_q = None

    for q in questions:
        text = q.get('question_text', '').lower()
        if '—Ç—è–≥' in text or 'craving' in text:
            craving_q = q
        elif '—Å—Ä—ã–≤' in text or 'relapse' in text:
            relapse_q = q

    if craving_q:
        return (str(craving_q['id']), str(relapse_q['id']) if relapse_q else None)

    return None


def analyze_addiction_craving(
    craving_q_id: str,
    relapse_q_id: Optional[str],
    responses: List[Dict]
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Ç—è–≥–∏ –∏ —Å—Ä—ã–≤–æ–≤."""
    craving_values = []
    relapse_count = 0

    for resp in responses:
        answers = resp.get('answers', {})

        # –¢—è–≥–∞
        if craving_q_id in answers:
            try:
                value = float(answers[craving_q_id])
                craving_values.append(value)
            except (ValueError, TypeError):
                pass

        # –°—Ä—ã–≤—ã
        if relapse_q_id and relapse_q_id in answers:
            answer = answers[relapse_q_id].lower()
            if answer in ['–¥–∞', 'yes', 'y']:
                relapse_count += 1

    if not craving_values:
        return {'count': 0}

    # –¢—Ä–µ–Ω–¥ —Ç—è–≥–∏
    avg_craving = sum(craving_values) / len(craving_values)

    if len(craving_values) >= 4:
        mid = len(craving_values) // 2
        first_half_avg = sum(craving_values[:mid]) / mid
        second_half_avg = sum(craving_values[mid:]) / (len(craving_values) - mid)
        trend_diff = second_half_avg - first_half_avg

        if trend_diff < -0.5:
            trend = '—Å–Ω–∏–∂–∞–µ—Ç—Å—è'
            trend_emoji = 'üìâ'
        elif trend_diff > 0.5:
            trend = '—Ä–∞—Å—Ç–µ—Ç'
            trend_emoji = 'üìà'
        else:
            trend = '—Å—Ç–∞–±–∏–ª—å–Ω–∞'
            trend_emoji = '‚û°Ô∏è'
    else:
        trend = '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
        trend_emoji = '‚ùì'

    return {
        'count': len(craving_values),
        'avg_craving': avg_craving,
        'min_craving': min(craving_values),
        'max_craving': max(craving_values),
        'trend': trend,
        'trend_emoji': trend_emoji,
        'relapse_count': relapse_count,
        'relapse_percentage': (relapse_count / len(responses) * 100) if responses else 0
    }


def format_survey_stats_message(
    template: Dict,
    questions: List[Dict],
    responses: List[Dict],
    options: Dict
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ–ø—Ä–æ—Å–∞."""
    if not responses:
        return (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {template['name']}*\n\n"
            f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
            f"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–æ—Å: /fill {template['name']}"
        )

    message = [
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {template['name']}*",
        f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {options.get('period_days', 30)} –¥–Ω–µ–π",
        f"üìù –û—Ç–≤–µ—Ç–æ–≤: *{len(responses)}*",
        ""
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    cbt_pattern = detect_cbt_pattern(questions)
    addiction_pattern = detect_addiction_pattern(questions)

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ö–ü–¢
    if cbt_pattern:
        before_id, after_id = cbt_pattern
        cbt_stats = analyze_cbt_before_after(before_id, after_id, responses)

        if cbt_stats['count'] > 0:
            message.extend([
                "*üß† –ö–ü–¢ –ê–Ω–∞–ª–∏–∑: –î–æ/–ü–æ—Å–ª–µ*",
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –î–û: *{cbt_stats['avg_before']:.1f}*",
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ü–û–°–õ–ï: *{cbt_stats['avg_after']:.1f}*",
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: *{cbt_stats['avg_improvement']:.1f}* ({cbt_stats['improvement_percentage']:.0f}%)",
                ""
            ])

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if addiction_pattern:
        craving_id, relapse_id = addiction_pattern
        addiction_stats = analyze_addiction_craving(craving_id, relapse_id, responses)

        if addiction_stats['count'] > 0:
            message.extend([
                "*üí™ –ê–Ω–∞–ª–∏–∑ —Ç—è–≥–∏:*",
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç—è–≥–∞: *{addiction_stats['avg_craving']:.1f}/10*",
                f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {addiction_stats['min_craving']:.0f} - {addiction_stats['max_craving']:.0f}",
                f"‚Ä¢ –¢—Ä–µ–Ω–¥: {addiction_stats['trend_emoji']} {addiction_stats['trend']}",
                f"‚Ä¢ –°—Ä—ã–≤–æ–≤: *{addiction_stats['relapse_count']}* ({addiction_stats['relapse_percentage']:.0f}%)",
                ""
            ])

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    for question in questions:
        q_type = question.get('question_type')
        q_text = question.get('question_text', '–í–æ–ø—Ä–æ—Å')

        if q_type in ['numeric', 'scale']:
            stats = analyze_numeric_question(question, responses)
            if stats['count'] > 0:
                message.extend([
                    f"*üìä {q_text}*",
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: *{stats['avg']:.1f}*",
                    f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {stats['min']:.1f} - {stats['max']:.1f}",
                    f"‚Ä¢ –¢—Ä–µ–Ω–¥: {stats['trend_emoji']} {stats['trend']}",
                    ""
                ])

        elif q_type == 'choice':
            stats = analyze_choice_question(question, responses)
            if stats['count'] > 0:
                message.append(f"*‚òëÔ∏è {q_text}*")
                for choice_data in stats['choices'][:5]:  # –¢–æ–ø 5
                    message.append(
                        f"‚Ä¢ {choice_data['text']}: *{choice_data['count']}* ({choice_data['percentage']:.0f}%)"
                    )
                message.append("")

        elif q_type == 'yes_no':
            stats = analyze_yes_no_question(question, responses)
            if stats['count'] > 0:
                message.extend([
                    f"*‚úÖ {q_text}*",
                    f"‚Ä¢ –î–∞: *{stats['yes_count']}* ({stats['yes_percentage']:.0f}%)",
                    f"‚Ä¢ –ù–µ—Ç: *{stats['no_count']}* ({stats['no_percentage']:.0f}%)",
                    ""
                ])

    message.extend([
        "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏:_",
        "_‚Ä¢ --period N (–¥–Ω–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)_"
    ])

    return "\n".join(message)


async def show_survey_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø—Ä–æ—Å—É - /survey_stats <–Ω–∞–∑–≤–∞–Ω–∏–µ>.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - <–Ω–∞–∑–≤–∞–Ω–∏–µ>: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    - --period N: –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    """
    chat_id = update.effective_chat.id

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    survey_name, options = parse_survey_args(context.args)

    if not survey_name:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /survey_stats <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys"
        )
        return

    try:
        conn = _get_db_connection()

        # –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω
        templates = get_available_templates(conn)
        template = next((t for t in templates if t['name'] == survey_name), None)

        if not template:
            await update.message.reply_text(
                f"‚ùå –û–ø—Ä–æ—Å *{survey_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys",
                parse_mode='Markdown'
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = get_template_questions(conn, template['id'])

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_responses = get_user_survey_responses(conn, chat_id, template['id'])

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        responses = filter_responses_by_period(all_responses, options.get('period_days', 30))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_survey_stats_message(template, questions, responses, options)

        await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def register(application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤."""
    application.add_handler(CommandHandler('survey_stats', show_survey_stats))

    logger.info("Survey analytics handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

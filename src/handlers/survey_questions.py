"""
Handlers –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö (Phase 3.2).

–ö–æ–º–∞–Ω–¥—ã:
- /add_question <–Ω–∞–∑–≤–∞–Ω–∏–µ_—à–∞–±–ª–æ–Ω–∞> - –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —à–∞–±–ª–æ–Ω—É
"""

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)

from src.config import ADD_QUESTION_TYPE, ADD_QUESTION_TEXT, ADD_QUESTION_CONFIG
from src.data.storage import _get_db_connection
from src.data.surveys_storage import (
    get_user_templates,
    get_template_questions,
    add_question_to_template
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MIN_QUESTION_LENGTH = 10
MAX_QUESTION_LENGTH = 500
MAX_QUESTIONS = 30

# –¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
QUESTION_TYPES = {
    'text': 'üìù –¢–µ–∫—Å—Ç',
    'numeric': 'üî¢ –ß–∏—Å–ª–æ',
    'yes_no': '‚úÖ –î–∞/–ù–µ—Ç',
    'time': 'üïê –í—Ä–µ–º—è',
    'choice': '‚òëÔ∏è –í—ã–±–æ—Ä',
    'scale': 'üìä –®–∫–∞–ª–∞'
}

# –¢–∏–ø—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
TYPES_NEED_CONFIG = {'numeric', 'choice', 'scale'}


async def add_question_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ - /add_question <–Ω–∞–∑–≤–∞–Ω–∏–µ_—à–∞–±–ª–æ–Ω–∞>.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —à–∞–±–ª–æ–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞.
    """
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_question <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã: /my_surveys"
        )
        return ConversationHandler.END

    template_name = ' '.join(context.args)

    try:
        conn = _get_db_connection()

        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        templates = get_user_templates(conn, chat_id)
        template = next((t for t in templates if t['name'] == template_name), None)

        if not template:
            await update.message.reply_text(
                f"‚ùå –®–∞–±–ª–æ–Ω *{template_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã: /my_surveys",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = get_template_questions(conn, template['id'])
        if len(questions) >= MAX_QUESTIONS:
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ ({MAX_QUESTIONS}) –¥–ª—è —à–∞–±–ª–æ–Ω–∞ *{template_name}*.\n\n"
                f"–£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['template_id'] = template['id']
        context.user_data['template_name'] = template_name

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        keyboard = []
        for qtype, label in QUESTION_TYPES.items():
            keyboard.append([InlineKeyboardButton(label, callback_data=f"qtype_{qtype}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ '{template_name}'*\n\n"
            f"–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(questions)}/{MAX_QUESTIONS}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        return ADD_QUESTION_TYPE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def select_question_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∏–∑ callback_data
    question_type = query.data.replace("qtype_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['question_type'] = question_type

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    hints = {
        'text': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.',
        'numeric': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç —á–∏—Å–ª–æ (–≤—ã –∑–∞–¥–∞–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω).',
        'yes_no': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –î–∞ –∏–ª–∏ –ù–µ—Ç.',
        'time': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.',
        'choice': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
        'scale': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —à–∫–∞–ª–µ.'
    }

    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: *{QUESTION_TYPES[question_type]}*\n\n"
        f"{hints.get(question_type, '')}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ ({MIN_QUESTION_LENGTH}-{MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        f"_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_",
        parse_mode='Markdown'
    )

    return ADD_QUESTION_TEXT


async def receive_question_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ.
    """
    question_text = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(question_text) < MIN_QUESTION_LENGTH:
        await update.message.reply_text(
            f"‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.\n"
            f"–ú–∏–Ω–∏–º—É–º {MIN_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return ADD_QUESTION_TEXT

    if len(question_text) > MAX_QUESTION_LENGTH:
        await update.message.reply_text(
            f"‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return ADD_QUESTION_TEXT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    context.user_data['question_text'] = question_text
    question_type = context.user_data['question_type']

    # –î–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
    if question_type in TYPES_NEED_CONFIG:
        await update.message.reply_text(
            _get_config_prompt(question_type),
            parse_mode='Markdown'
        )
        return ADD_QUESTION_CONFIG

    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤ - —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    return await _save_question(update, context, None)


async def configure_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞.
    """
    question_type = context.user_data['question_type']
    config_text = update.message.text.strip()

    # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config, error = _parse_config(question_type, config_text)

    if error:
        await update.message.reply_text(
            f"‚ùå {error}\n\n"
            f"{_get_config_prompt(question_type)}",
            parse_mode='Markdown'
        )
        return ADD_QUESTION_CONFIG

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    return await _save_question(update, context, config)


async def _save_question(update: Update, context: ContextTypes.DEFAULT_TYPE, config: dict) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –ë–î.
    """
    chat_id = update.effective_chat.id
    template_id = context.user_data['template_id']
    template_name = context.user_data['template_name']
    question_text = context.user_data['question_text']
    question_type = context.user_data['question_type']

    try:
        conn = _get_db_connection()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        question_data = {
            'question_text': question_text,
            'question_type': question_type,
            'config': json.dumps(config) if config else None,
            'is_required': True
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
        question_id = add_question_to_template(conn, template_id, chat_id, question_data)

        if question_id is None:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
            )
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = get_template_questions(conn, template_id)

        await update.message.reply_text(
            f"‚úÖ *–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
            f"üìù {question_text}\n"
            f"–¢–∏–ø: {QUESTION_TYPES[question_type]}\n\n"
            f"–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(questions)}/{MAX_QUESTIONS}\n\n"
            f"–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å:\n"
            f"/add_question {template_name}\n\n"
            f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω:\n"
            f"/activate_survey {template_name}\n\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
            f"/my_surveys",
            parse_mode='Markdown'
        )

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        for key in ['template_id', 'template_name', 'question_type', 'question_text']:
            context.user_data.pop(key, None)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


def _get_config_prompt(question_type: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    if question_type == 'numeric':
        return (
            "üî¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_ `0 100`\n"
            "(—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100)"
        )
    elif question_type == 'choice':
        return (
            "‚òëÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º*\n\n"
            "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: `single` (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç) –∏–ª–∏ `multiple` (–Ω–µ—Å–∫–æ–ª—å–∫–æ)\n"
            "–î–∞–ª–µ–µ –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ (2-10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤).\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_\n"
            "`single`\n"
            "`–í–∞—Ä–∏–∞–Ω—Ç 1`\n"
            "`–í–∞—Ä–∏–∞–Ω—Ç 2`\n"
            "`–í–∞—Ä–∏–∞–Ω—Ç 3`"
        )
    elif question_type == 'scale':
        return (
            "üìä *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∫–∞–ª—ã*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º, –º–∞–∫—Å–∏–º—É–º –∏ —à–∞–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
            "_–ü—Ä–∏–º–µ—Ä:_ `1 10 1`\n"
            "(—à–∫–∞–ª–∞ –æ—Ç 1 –¥–æ 10 —Å —à–∞–≥–æ–º 1)"
        )
    return ""


def _parse_config(question_type: str, config_text: str) -> tuple:
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.

    Returns:
        (config_dict, error_message)
    """
    try:
        if question_type == 'numeric':
            parts = config_text.split()
            if len(parts) != 2:
                return None, "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º)."

            min_val = float(parts[0])
            max_val = float(parts[1])

            if min_val >= max_val:
                return None, "–ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞."

            return {'min': min_val, 'max': max_val}, None

        elif question_type == 'choice':
            lines = [line.strip() for line in config_text.split('\n') if line.strip()]

            if len(lines) < 2:
                return None, "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤—ã–±–æ—Ä–∞ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç."

            choice_type = lines[0].lower()
            if choice_type not in ['single', 'multiple']:
                return None, "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'single' –∏–ª–∏ 'multiple'."

            options = lines[1:]
            if len(options) < 2:
                return None, "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞."

            if len(options) > 10:
                return None, "–ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞."

            return {'type': choice_type, 'options': options}, None

        elif question_type == 'scale':
            parts = config_text.split()
            if len(parts) != 3:
                return None, "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–º–∏–Ω–∏–º—É–º, –º–∞–∫—Å–∏–º—É–º, —à–∞–≥)."

            min_val = float(parts[0])
            max_val = float(parts[1])
            step = float(parts[2])

            if min_val >= max_val:
                return None, "–ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞."

            if step <= 0:
                return None, "–®–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è."

            if step > (max_val - min_val):
                return None, "–®–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."

            return {'min': min_val, 'max': max_val, 'step': step}, None

    except ValueError:
        return None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —á–∏—Å–ª–∞."

    return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞."


async def cancel_add_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.
    """
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    for key in ['template_id', 'template_name', 'question_type', 'question_text']:
        context.user_data.pop(key, None)

    await update.message.reply_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )

    return ConversationHandler.END


def register(application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    add_question_conv = ConversationHandler(
        entry_points=[CommandHandler('add_question', add_question_start)],
        states={
            ADD_QUESTION_TYPE: [
                CallbackQueryHandler(select_question_type, pattern='^qtype_')
            ],
            ADD_QUESTION_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_question_text)
            ],
            ADD_QUESTION_CONFIG: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, configure_question)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_add_question)],
        name="add_question_conversation",
        persistent=False
    )

    application.add_handler(add_question_conv)

    logger.info("Survey question handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

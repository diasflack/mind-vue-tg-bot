"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.
"""

import logging
from typing import Dict, Any, List
from telegram import Update
from telegram.ext import ContextTypes, Application, CommandHandler

from src.utils.keyboards import MAIN_KEYBOARD
from src.data.storage import _get_db_connection
from src.data.surveys_storage import (
    get_user_survey_responses,
    get_responses_by_template,
    get_template_by_id,
    get_template_by_name,
    get_template_questions
)

logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
MAX_RESPONSES_PER_MESSAGE = 10


def _format_response_summary(response: Dict[str, Any], template: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ.

    Args:
        response: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        template: –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    icon = template.get('icon', 'üìù')
    name = template['name']
    date = response['response_date']
    time = response['response_time']

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    try:
        year, month, day = date.split('-')
        formatted_date = f"{day}.{month}.{year}"
    except:
        formatted_date = date

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (—É–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã)
    formatted_time = time.rsplit(':', 1)[0] if ':' in time else time

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
    answer_count = len(response.get('answers', {}))

    summary = f"{icon} *{name}*\n"
    summary += f"üìÖ {formatted_date} ‚è∞ {formatted_time}\n"
    summary += f"üìä –û—Ç–≤–µ—Ç–æ–≤: {answer_count}\n"
    summary += f"ID: `{response['id']}`"

    return summary


def _format_detailed_response(
    response: Dict[str, Any],
    template: Dict[str, Any],
    questions: List[Dict[str, Any]]
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.

    Args:
        response: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        template: –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        questions: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —à–∞–±–ª–æ–Ω–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    icon = template.get('icon', 'üìù')
    name = template['name']
    date = response['response_date']
    time = response['response_time']
    answers = response.get('answers', {})

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        year, month, day = date.split('-')
        formatted_date = f"{day}.{month}.{year}"
    except:
        formatted_date = date

    formatted_time = time.rsplit(':', 1)[0] if ':' in time else time

    message = f"{icon} *{name}*\n"
    message += f"üìÖ {formatted_date} ‚è∞ {formatted_time}\n"
    message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    for question in questions:
        question_id = str(question['id'])
        if question_id in answers:
            answer = answers[question_id]
            message += f"‚ùì *{question['question_text']}*\n"
            message += f"üí¨ {answer}\n\n"

    return message


async def show_my_responses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–æ—Å—ã - –∫–æ–º–∞–Ω–¥–∞ /my_responses.
    """
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã")

    conn = _get_db_connection()
    responses = get_user_survey_responses(conn, chat_id)

    if not responses:
        await update.message.reply_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–æ—Å: `/fill <–Ω–∞–∑–≤–∞–Ω–∏–µ>`",
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    template_cache = {}
    grouped = {}

    for response in responses:
        template_id = response['template_id']

        # –ö–µ—à–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑
        if template_id not in template_cache:
            template_cache[template_id] = get_template_by_id(conn, template_id)

        if template_id not in grouped:
            grouped[template_id] = []
        grouped[template_id].append(response)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìã *–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã*\n"
    message += f"–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(responses)}\n\n"
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

    count = 0
    for template_id, template_responses in grouped.items():
        template = template_cache[template_id]
        if not template:
            continue

        icon = template.get('icon', 'üìù')
        name = template['name']

        message += f"{icon} *{name}*\n"
        message += f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: {len(template_responses)}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤
        for response in template_responses[:3]:  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            date = response['response_date']
            try:
                year, month, day = date.split('-')
                formatted_date = f"{day}.{month}.{year}"
            except:
                formatted_date = date

            time = response['response_time'].rsplit(':', 1)[0]
            message += f"  ‚Ä¢ {formatted_date} {time} (ID: `{response['id']}`)\n"

        if len(template_responses) > 3:
            message += f"  _...–∏ –µ—â–µ {len(template_responses) - 3}_\n"

        message += "\n"

        count += len(template_responses)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 3500:
            break

    message += f"\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–ø—Ä–æ—Å—É:\n"
    message += "`/survey_responses <–Ω–∞–∑–≤–∞–Ω–∏–µ>`"

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=MAIN_KEYBOARD
    )


async def show_survey_responses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–ø—Ä–æ—Å - –∫–æ–º–∞–Ω–¥–∞ /survey_responses <–Ω–∞–∑–≤–∞–Ω–∏–µ>.
    """
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/survey_responses –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫`\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã: /my_responses",
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )
        return

    # –°–æ–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    survey_name = ' '.join(context.args)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å '{survey_name}'")

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –æ–ø—Ä–æ—Å–∞
    conn = _get_db_connection()
    template = get_template_by_name(conn, survey_name)

    if not template:
        await update.message.reply_text(
            f"‚ùå –û–ø—Ä–æ—Å '{survey_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys",
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å
    responses = get_responses_by_template(conn, chat_id, template['id'])

    if not responses:
        await update.message.reply_text(
            f"üìã –í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –æ–ø—Ä–æ—Å *{survey_name}*.\n\n"
            f"–ó–∞–ø–æ–ª–Ω–∏—Ç—å: `/fill {survey_name}`",
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —à–∞–±–ª–æ–Ω–∞
    questions = get_template_questions(conn, template['id'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    icon = template.get('icon', 'üìù')
    message = f"{icon} *{survey_name}*\n"
    message += f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: {len(responses)}\n"
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
    for i, response in enumerate(responses[:MAX_RESPONSES_PER_MESSAGE], 1):
        date = response['response_date']
        try:
            year, month, day = date.split('-')
            formatted_date = f"{day}.{month}.{year}"
        except:
            formatted_date = date

        time = response['response_time'].rsplit(':', 1)[0]

        message += f"*–û—Ç–≤–µ—Ç #{i}* (ID: `{response['id']}`)\n"
        message += f"üìÖ {formatted_date} ‚è∞ {time}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        answers = response.get('answers', {})
        for question in questions:
            question_id = str(question['id'])
            if question_id in answers:
                answer = answers[question_id]
                q_text = question['question_text']

                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                if len(q_text) > 50:
                    q_text = q_text[:47] + "..."

                message += f"‚ùì {q_text}\n"

                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                if len(answer) > 100:
                    answer = answer[:97] + "..."

                message += f"üí¨ {answer}\n\n"

        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 3500:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            message = f"{icon} *{survey_name}* (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(message) > 50:
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )

    if len(responses) > MAX_RESPONSES_PER_MESSAGE:
        await update.message.reply_text(
            f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {MAX_RESPONSES_PER_MESSAGE} –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len(responses)}.",
            reply_markup=MAIN_KEYBOARD
        )

    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(len(responses), MAX_RESPONSES_PER_MESSAGE)} –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")


def register(application: Application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    application.add_handler(CommandHandler('my_responses', show_my_responses))
    application.add_handler(CommandHandler('survey_responses', show_survey_responses))

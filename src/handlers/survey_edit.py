"""
Handlers –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ (Phase 3.3).

–ö–æ–º–∞–Ω–¥—ã:
- /edit_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å
- /edit_question <–Ω–∞–∑–≤–∞–Ω–∏–µ_—à–∞–±–ª–æ–Ω–∞> <–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
- /delete_question <–Ω–∞–∑–≤–∞–Ω–∏–µ_—à–∞–±–ª–æ–Ω–∞> <–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞> - —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)

from src.config import EDIT_SURVEY_SELECT, EDIT_QUESTION_SELECT
from src.data.storage import _get_db_connection
from src.data.surveys_storage import (
    get_user_templates,
    get_template_questions,
    update_template,
    update_question,
    delete_question
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MIN_NAME_LENGTH = 3
MAX_NAME_LENGTH = 50
MAX_DESCRIPTION_LENGTH = 500
MIN_QUESTION_LENGTH = 10
MAX_QUESTION_LENGTH = 500


async def edit_survey_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ - /edit_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ>.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞.\\n\\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ>\\n\\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã: /my_surveys"
        )
        return ConversationHandler.END

    template_name = ' '.join(context.args)

    try:
        conn = _get_db_connection()

        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        templates = get_user_templates(conn, chat_id)
        template = next((t for t in templates if t['name'] == template_name), None)

        if not template:
            await update.message.reply_text(
                f"‚ùå –®–∞–±–ª–æ–Ω *{template_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω.\\n\\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã: /my_surveys",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω
        if template.get('is_system', False):
            await update.message.reply_text(
                f"‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω *{template_name}* –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.\\n\\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: /create_survey",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['template_id'] = template['id']
        context.user_data['template_name'] = template_name

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_desc")],
            [InlineKeyboardButton("‚ùì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="edit_questions")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        questions = get_template_questions(conn, template['id'])

        await update.message.reply_text(
            f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '{template_name}'*\\n\\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {template['description']}\\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\\n"
            f"{'‚úÖ' if template['is_active'] else '‚è∏'} –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if template['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\\n\\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        return EDIT_SURVEY_SELECT

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def handle_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()

    action = query.data

    if action == "edit_cancel":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    elif action == "edit_name":
        await query.edit_message_text(
            f"‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è*\\n\\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{context.user_data['template_name']}*\\n\\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ({MIN_NAME_LENGTH}-{MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\\n\\n"
            f"_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_",
            parse_mode='Markdown'
        )
        context.user_data['edit_action'] = 'name'
        return EDIT_SURVEY_SELECT

    elif action == "edit_desc":
        await query.edit_message_text(
            f"üìù *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è*\\n\\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\\n\\n"
            f"_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_",
            parse_mode='Markdown'
        )
        context.user_data['edit_action'] = 'description'
        return EDIT_SURVEY_SELECT

    elif action == "edit_questions":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            conn = _get_db_connection()
            template_id = context.user_data['template_id']
            questions = get_template_questions(conn, template_id)

            if not questions:
                await query.edit_message_text(
                    "‚ùì –í —à–∞–±–ª–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.\\n\\n"
                    f"–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å: /add_question {context.user_data['template_name']}"
                )
                return ConversationHandler.END

            keyboard = []
            for i, q in enumerate(questions, 1):
                text = q['question_text']
                if len(text) > 40:
                    text = text[:37] + "..."
                keyboard.append([
                    InlineKeyboardButton(f"{i}. {text}", callback_data=f"editq_{q['id']}")
                ])

            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"‚ùì *–í–æ–ø—Ä–æ—Å—ã –≤ '{context.user_data['template_name']}'*\\n\\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            return EDIT_QUESTION_SELECT

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    return EDIT_SURVEY_SELECT


async def edit_survey_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
    """
    chat_id = update.effective_chat.id
    new_name = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(new_name) < MIN_NAME_LENGTH:
        await update.message.reply_text(
            f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\\n"
            f"–ú–∏–Ω–∏–º—É–º {MIN_NAME_LENGTH} —Å–∏–º–≤–æ–ª–∞."
        )
        return EDIT_SURVEY_SELECT

    if len(new_name) > MAX_NAME_LENGTH:
        await update.message.reply_text(
            f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return EDIT_SURVEY_SELECT

    try:
        conn = _get_db_connection()
        template_id = context.user_data['template_id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        existing = get_user_templates(conn, chat_id)
        if any(t['name'] == new_name and t['id'] != template_id for t in existing):
            await update.message.reply_text(
                f"‚ùå –û–ø—Ä–æ—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º *{new_name}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\\n\\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                parse_mode='Markdown'
            )
            return EDIT_SURVEY_SELECT

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        success = update_template(conn, template_id, chat_id, name=new_name)

        if success:
            await update.message.reply_text(
                f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\\n\\n"
                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_name}\\n\\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–æ—Å: /my_surveys",
                parse_mode='Markdown'
            )
            context.user_data.clear()
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.\\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è."
        )
        return ConversationHandler.END


async def edit_survey_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
    """
    chat_id = update.effective_chat.id
    new_description = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(new_description) > MAX_DESCRIPTION_LENGTH:
        await update.message.reply_text(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return EDIT_SURVEY_SELECT

    try:
        conn = _get_db_connection()
        template_id = context.user_data['template_id']

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        success = update_template(conn, template_id, chat_id, description=new_description)

        if success:
            await update.message.reply_text(
                f"‚úÖ *–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\\n\\n"
                f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}\\n\\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–æ—Å: /my_surveys",
                parse_mode='Markdown'
            )
            context.user_data.clear()
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è."
        )
        return ConversationHandler.END


async def handle_question_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()

    if query.data == "edit_cancel":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
    question_id = int(query.data.replace("editq_", ""))
    context.user_data['question_id'] = question_id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="editq_text")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="editq_delete")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞*\\n\\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    return EDIT_QUESTION_SELECT


async def handle_question_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º.
    """
    query = update.callback_query
    await query.answer()

    action = query.data

    if action == "edit_cancel":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    elif action == "editq_text":
        await query.edit_message_text(
            f"‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞*\\n\\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ ({MIN_QUESTION_LENGTH}-{MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\\n\\n"
            f"_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_",
            parse_mode='Markdown'
        )
        context.user_data['question_action'] = 'text'
        return EDIT_QUESTION_SELECT

    elif action == "editq_delete":
        # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        return await delete_question_confirm(update, context)

    return EDIT_QUESTION_SELECT


async def edit_question_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞.
    """
    chat_id = update.effective_chat.id
    new_text = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(new_text) < MIN_QUESTION_LENGTH:
        await update.message.reply_text(
            f"‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.\\n"
            f"–ú–∏–Ω–∏–º—É–º {MIN_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return EDIT_QUESTION_SELECT

    if len(new_text) > MAX_QUESTION_LENGTH:
        await update.message.reply_text(
            f"‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return EDIT_QUESTION_SELECT

    try:
        conn = _get_db_connection()
        template_id = context.user_data['template_id']
        question_id = context.user_data['question_id']

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        success = update_question(conn, question_id, template_id, chat_id, question_text=new_text)

        if success:
            await update.message.reply_text(
                f"‚úÖ *–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!*\\n\\n"
                f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {new_text}\\n\\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã: /my_surveys",
                parse_mode='Markdown'
            )
            context.user_data.clear()
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞."
            )
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."
        )
        return ConversationHandler.END


async def delete_question_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞.
    """
    chat_id = update.effective_chat.id

    try:
        conn = _get_db_connection()
        template_id = context.user_data['template_id']
        question_id = context.user_data['question_id']

        # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        success = delete_question(conn, question_id, template_id, chat_id)

        if success:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    f"‚úÖ *–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!*\\n\\n"
                    f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã: /my_surveys",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    f"‚úÖ *–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!*\\n\\n"
                    f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã: /my_surveys",
                    parse_mode='Markdown'
                )
            context.user_data.clear()
            return ConversationHandler.END
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å."
            if update.callback_query:
                await update.callback_query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."
        if update.callback_query:
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return ConversationHandler.END


async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    context.user_data.clear()

    await update.message.reply_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )

    return ConversationHandler.END


def register(application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.
    """
    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    edit_survey_conv = ConversationHandler(
        entry_points=[CommandHandler('edit_survey', edit_survey_start)],
        states={
            EDIT_SURVEY_SELECT: [
                CallbackQueryHandler(handle_edit_menu, pattern='^edit_'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: (
                    edit_survey_name(update, context)
                    if context.user_data.get('edit_action') == 'name'
                    else edit_survey_description(update, context)
                ))
            ],
            EDIT_QUESTION_SELECT: [
                CallbackQueryHandler(handle_question_select, pattern='^editq_\\d+$'),
                CallbackQueryHandler(handle_question_action, pattern='^editq_(text|delete)$'),
                CallbackQueryHandler(handle_edit_menu, pattern='^edit_cancel$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: (
                    edit_question_text(update, context)
                    if context.user_data.get('question_action') == 'text'
                    else ConversationHandler.END
                ))
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_edit)],
        name="edit_survey_conversation",
        persistent=False
    )

    application.add_handler(edit_survey_conv)

    logger.info("Survey edit handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

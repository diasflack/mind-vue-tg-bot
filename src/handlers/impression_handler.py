"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.
–†–µ–∞–ª–∏–∑—É–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.
"""

import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler,
    MessageHandler, filters, Application
)

from src.config import (
    IMPRESSION_TEXT, IMPRESSION_INTENSITY,
    IMPRESSION_CATEGORY, IMPRESSION_TAGS
)
from src.utils.keyboards import NUMERIC_KEYBOARD, MAIN_KEYBOARD
from src.data.storage import save_user, _get_db_connection
from src.data.impressions_storage import (
    save_impression, create_tag, attach_tags_to_impression
)
from src.data.models import IMPRESSION_CATEGORIES
from src.utils.conversation_manager import register_conversation, end_conversation, end_all_conversations

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
HANDLER_NAME = "impression_handler"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORY_KEYBOARD = ReplyKeyboardMarkup([
    ['1 - –í–ª–µ—á–µ–Ω–∏–µ/–¢—è–≥–∞', '2 - –≠–º–æ—Ü–∏—è'],
    ['3 - –§–∏–∑–∏—á–µ—Å–∫–æ–µ', '4 - –ú—ã—Å–ª–∏'],
    ['5 - –î—Ä—É–≥–æ–µ', '/skip']
], one_time_keyboard=True)

# –ú–∞–ø–ø–∏–Ω–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
CATEGORY_MAP = {
    '1': 'craving',
    '2': 'emotion',
    '3': 'physical',
    '4': 'thoughts',
    '5': 'other'
}


async def start_impression(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.
    –ü–µ—Ä–≤—ã–π —à–∞–≥ - –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.
    """
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = update.effective_chat.id
    end_all_conversations(chat_id)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    register_conversation(chat_id, HANDLER_NAME, IMPRESSION_TEXT)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    save_user(chat_id, username, first_name)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    now = datetime.now()
    impression_date = now.strftime('%Y-%m-%d')
    impression_time = now.strftime('%H:%M:%S')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['impression'] = {
        'chat_id': chat_id,
        'impression_date': impression_date,
        'impression_time': impression_time
    }

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è")

    await update.effective_message.reply_text(
        "üìù –ù–æ–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ:\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å', '–ó–ª—é—Å—å', '–ú–Ω–µ —Ö–æ—Ä–æ—à–æ')\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )

    return IMPRESSION_TEXT


async def handle_impression_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.
    """
    text = update.message.text.strip()

    if not text:
        await update.effective_message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è."
        )
        return IMPRESSION_TEXT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    context.user_data['impression']['impression_text'] = text

    logger.debug(f"–¢–µ–∫—Å—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è: {text}")

    await update.effective_message.reply_text(
        "–û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10:\n"
        "(–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        reply_markup=NUMERIC_KEYBOARD
    )

    return IMPRESSION_INTENSITY


async def handle_impression_intensity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏.
    """
    text = update.message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫
    if text == '/skip':
        context.user_data['impression']['intensity'] = None
        logger.debug("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    else:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        try:
            intensity = int(text)
            if intensity < 1 or intensity > 10:
                await update.effective_message.reply_text(
                    "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /skip:",
                    reply_markup=NUMERIC_KEYBOARD
                )
                return IMPRESSION_INTENSITY

            context.user_data['impression']['intensity'] = intensity
            logger.debug(f"–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity}")
        except ValueError:
            await update.effective_message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ /skip:",
                reply_markup=NUMERIC_KEYBOARD
            )
            return IMPRESSION_INTENSITY

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await update.effective_message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n"
        "1Ô∏è‚É£ –í–ª–µ—á–µ–Ω–∏–µ/–¢—è–≥–∞\n"
        "2Ô∏è‚É£ –≠–º–æ—Ü–∏—è\n"
        "3Ô∏è‚É£ –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "4Ô∏è‚É£ –ú—ã—Å–ª–∏\n"
        "5Ô∏è‚É£ –î—Ä—É–≥–æ–µ\n\n"
        "–∏–ª–∏ /skip",
        reply_markup=CATEGORY_KEYBOARD
    )

    return IMPRESSION_CATEGORY


async def handle_impression_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    text = update.message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫
    if text == '/skip':
        context.user_data['impression']['category'] = None
        logger.debug("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª (—á–∏—Å–ª–æ)
        choice = text[0] if text else None

        if choice in CATEGORY_MAP:
            category = CATEGORY_MAP[choice]
            context.user_data['impression']['category'] = category
            logger.debug(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        else:
            await update.effective_message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-5) –∏–ª–∏ /skip:",
                reply_markup=CATEGORY_KEYBOARD
            )
            return IMPRESSION_CATEGORY

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–≥–∞–º
    await update.effective_message.reply_text(
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ /skip)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–µ—Å—Å, —Ä–∞–±–æ—Ç–∞, –≤–µ—á–µ—Ä"
    )

    return IMPRESSION_TAGS


async def handle_impression_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–≥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.
    """
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    conn = _get_db_connection()

    impression_data = context.user_data['impression']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ
    success = save_impression(conn, impression_data)

    if not success:
        await update.effective_message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=MAIN_KEYBOARD
        )
        end_conversation(chat_id, HANDLER_NAME)
        if 'impression' in context.user_data:
            context.user_data.pop('impression')
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id FROM impressions
        WHERE chat_id = ? AND impression_date = ? AND impression_time = ?
        ORDER BY id DESC LIMIT 1
    """, (chat_id, impression_data['impression_date'], impression_data['impression_time']))

    row = cursor.fetchone()
    if not row:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è")
    else:
        impression_id = row[0]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ /skip
        if text != '/skip' and text:
            # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
            tag_names = [t.strip() for t in text.split(',') if t.strip()]

            if tag_names:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö ID
                tag_ids = []
                for tag_name in tag_names:
                    tag_id = create_tag(conn, chat_id, tag_name)
                    if tag_id:
                        tag_ids.append(tag_id)

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ –∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—é
                if tag_ids:
                    attach_tags_to_impression(conn, impression_id, tag_ids)
                    logger.info(f"–ü—Ä–∏–≤—è–∑–∞–Ω–æ {len(tag_ids)} —Ç–µ–≥–æ–≤ –∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—é {impression_id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation = "‚úÖ –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
    confirmation += f"üìù {impression_data['impression_text']}\n"

    if impression_data.get('intensity'):
        confirmation += f"üî• –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {impression_data['intensity']}/10\n"

    if impression_data.get('category'):
        category_names = {
            'craving': '–í–ª–µ—á–µ–Ω–∏–µ/–¢—è–≥–∞',
            'emotion': '–≠–º–æ—Ü–∏—è',
            'physical': '–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            'thoughts': '–ú—ã—Å–ª–∏',
            'other': '–î—Ä—É–≥–æ–µ'
        }
        confirmation += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_names.get(impression_data['category'], impression_data['category'])}\n"

    if text != '/skip' and text:
        confirmation += f"üè∑Ô∏è –¢–µ–≥–∏: {text}\n"

    confirmation += f"‚è∞ {impression_data['impression_time'].rsplit(':', 1)[0]}, {impression_data['impression_date']}"

    await update.effective_message.reply_text(
        confirmation,
        reply_markup=MAIN_KEYBOARD
    )

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    end_conversation(chat_id, HANDLER_NAME)
    if 'impression' in context.user_data:
        context.user_data.pop('impression')

    logger.info(f"–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    return ConversationHandler.END


async def cancel_impression(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.
    """
    chat_id = update.effective_chat.id
    logger.info(f"–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    end_conversation(chat_id, HANDLER_NAME)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'impression' in context.user_data:
        context.user_data.pop('impression')

    await update.message.reply_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=MAIN_KEYBOARD
    )

    return ConversationHandler.END


# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
impression_conversation_handler = ConversationHandler(
    entry_points=[
        CommandHandler('impression', start_impression)
    ],
    states={
        IMPRESSION_TEXT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_impression_text)
        ],
        IMPRESSION_INTENSITY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_impression_intensity)
        ],
        IMPRESSION_CATEGORY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_impression_category)
        ],
        IMPRESSION_TAGS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_impression_tags)
        ]
    },
    fallbacks=[
        CommandHandler('cancel', cancel_impression)
    ],
    name=HANDLER_NAME
)


def register(application: Application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    application.add_handler(impression_conversation_handler)

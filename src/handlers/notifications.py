"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import logging
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CommandHandler, ConversationHandler,
    CallbackQueryHandler, MessageHandler, filters
)


from src.utils.conversation_manager import register_conversation, end_conversation, end_all_conversations
from src.utils.keyboards import MAIN_KEYBOARD
from src.data.storage import save_user, get_users_for_notification, has_entry_for_date
from src.utils.date_helpers import get_today, is_valid_time_format, local_to_utc

from src.config import (
    SELECTING_TIMEZONE, TYPING_TIME
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
HANDLER_NAME = "notification_handler"


async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notify.
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = update.effective_chat.id
    end_all_conversations(chat_id)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    register_conversation(chat_id, HANDLER_NAME, SELECTING_TIMEZONE)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π")

    def get_utc_inline_keyboard():
        buttons = []
        for i in range(-12, 15):
            sign = '+' if i >= 0 else ''
            label = f"UTC{sign}{i}:00"
            buttons.append(InlineKeyboardButton(label, callback_data=f"tz:{label}"))
        rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
        return InlineKeyboardMarkup(rows)

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=get_utc_inline_keyboard()
    )

    return SELECTING_TIMEZONE


async def timezone_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (context.user_data)
    tz_label = query.data.replace("tz:", "")
    match = re.match(r"UTC([+-]\d+):\d+", tz_label)
    offset_hours = int(match.group(1))
    context.user_data["timezone"] = offset_hours

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_label}.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç HH:MM):"
    )

    return TYPING_TIME


async def time_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    time_str = update.message.text.strip()

    if not is_valid_time_format(time_str):
        await update.message.reply_text(
            "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)."
        )
        return TYPING_TIME

    try:
        local_time = datetime.strptime(time_str, "%H:%M").time()
        offset = int(context.user_data.get("timezone"))

        if offset is None:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /notify.")
            return ConversationHandler.END

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTC
        utc_time_str = local_to_utc(local_time, offset)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ UTC
        save_user(
            chat_id=chat_id,
            username=username,
            first_name=first_name,
            notification_time=utc_time_str
        )

        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ {time_str} (UTC{offset:+}) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
            f"–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {utc_time_str} –ø–æ UTC.",
            reply_markup=MAIN_KEYBOARD
        )

    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")
        logger.error(f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {chat_id}: {e}")

    end_conversation(chat_id, HANDLER_NAME)
    return ConversationHandler.END


async def cancel_notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel_notify.
    –û—Ç–º–µ–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler.END
    """
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ None
    save_user(chat_id, username, first_name, notification_time=None)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    await update.message.reply_text(
        "‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        reply_markup=MAIN_KEYBOARD
    )
    return ConversationHandler.END


async def send_notifications(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    Args:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    current_hour = datetime.now().hour
    current_minute = datetime.now().minute
    current_time = f"{current_hour:02d}:{current_minute:02d}"
    today = get_today()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    users_to_notify = get_users_for_notification(current_time)

    for user in users_to_notify:
        chat_id = user['chat_id']
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            has_entry_today = has_entry_for_date(chat_id, today)

            # –í—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if has_entry_today:
                message = (
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add, –∏–ª–∏ "
                    "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /recent."
                )
            else:
                message = (
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="notify_add")],
                [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="notify_stats")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_disable")]
            ]

            await context.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


async def send_notification_to_user(context: ContextTypes.DEFAULT_TYPE, chat_id: int, custom_message: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.

    Args:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        custom_message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False - –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        today = get_today()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        has_entry_today = has_entry_for_date(chat_id, today)

        # –í—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if custom_message:
            message = custom_message
        elif has_entry_today:
            message = (
                "üîî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add, –∏–ª–∏ "
                "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /recent."
            )
        else:
            message = (
                "üîî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="notify_add")],
            [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="notify_stats")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_disable")]
        ]

        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False


async def send_notifications_to_all(context: ContextTypes.DEFAULT_TYPE, custom_message: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.

    Args:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        custom_message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {"sent": int, "failed": int, "total": int}
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    from src.data.storage import get_all_users_with_notifications
    
    users_with_notifications = get_all_users_with_notifications()
    
    sent_count = 0
    failed_count = 0
    total_count = len(users_with_notifications)
    
    for user in users_with_notifications:
        chat_id = user['chat_id']
        success = await send_notification_to_user(context, chat_id, custom_message)
        if success:
            sent_count += 1
        else:
            failed_count += 1
    
    logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{total_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
    
    return {
        "sent": sent_count,
        "failed": failed_count, 
        "total": total_count
    }


async def force_notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /force_notify [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler.END
    """
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    custom_message = None
    if context.args:
        custom_message = " ".join(context.args)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success = await send_notification_to_user(context, chat_id, custom_message)
    
    if success:
        await update.message.reply_text(
            "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            reply_markup=MAIN_KEYBOARD
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=MAIN_KEYBOARD
        )
    
    return ConversationHandler.END


async def admin_notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
    /admin_notify all [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    /admin_notify user <chat_id> [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler.END
    """
    chat_id = update.effective_chat.id
    
    # TOD: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª—é–±–æ–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞)
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/admin_notify all [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/admin_notify user <chat_id> [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END
    
    target = context.args[0].lower()
    
    if target == "all":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        custom_message = None
        if len(context.args) > 1:
            custom_message = " ".join(context.args[1:])
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        stats = await send_notifications_to_all(context, custom_message)
        
        await update.message.reply_text(
            f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {stats['failed']}\n"
            f"üìà –í—Å–µ–≥–æ: {stats['total']}",
            reply_markup=MAIN_KEYBOARD
        )
        
    elif target == "user":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(context.args) < 2:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_notify user <chat_id> [—Å–æ–æ–±—â–µ–Ω–∏–µ]",
                reply_markup=MAIN_KEYBOARD
            )
            return ConversationHandler.END
        
        try:
            target_chat_id = int(context.args[1])
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                reply_markup=MAIN_KEYBOARD
            )
            return ConversationHandler.END
        
        custom_message = None
        if len(context.args) > 2:
            custom_message = " ".join(context.args[2:])
        
        success = await send_notification_to_user(context, target_chat_id, custom_message)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_chat_id}",
                reply_markup=MAIN_KEYBOARD
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_chat_id}",
                reply_markup=MAIN_KEYBOARD
            )
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'all' –∏–ª–∏ 'user'.",
            reply_markup=MAIN_KEYBOARD
        )
    
    return ConversationHandler.END


async def notification_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ callback query
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    action = query.data

    if action == "notify_add":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ Message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.bot.send_message –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            from telegram import Message, User, Chat
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
            user = update.effective_user
            chat = update.effective_chat
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ reply_text —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º context.bot
            async def send_message_func(text, reply_markup=None, parse_mode=None):
                return await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /add
            fake_message = type('MockMessage', (), {
                'chat': chat,
                'from_user': user,
                'reply_text': send_message_func,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                'message_id': query.message.message_id,
                'date': query.message.date
            })()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
            fake_update = type('MockUpdate', (), {
                'message': fake_message,
                'effective_chat': chat,
                'effective_user': user,
                'callback_query': None
            })()
            
            # –û—á–∏—â–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            context.args = []
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
            from src.handlers.entry import start_entry
            await start_entry(fake_update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add –Ω–∞–ø—Ä—è–º—É—é.",
                reply_markup=MAIN_KEYBOARD
            )

    elif action == "notify_stats":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ Message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            from telegram import Message, User, Chat
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
            user = update.effective_user
            chat = update.effective_chat
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ reply_text —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º context.bot
            async def send_message_func(text, reply_markup=None, parse_mode=None):
                return await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stats
            fake_message = type('MockMessage', (), {
                'chat': chat,
                'from_user': user,
                'reply_text': send_message_func,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                'message_id': query.message.message_id,
                'date': query.message.date
            })()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
            fake_update = type('MockUpdate', (), {
                'message': fake_message,
                'effective_chat': chat,
                'effective_user': user,
                'callback_query': None
            })()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            from src.handlers.stats import stats
            await stats(fake_update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats –Ω–∞–ø—Ä—è–º—É—é.",
                reply_markup=MAIN_KEYBOARD
            )

    elif action == "notify_disable":
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        save_user(chat_id, username, first_name, notification_time=None)

        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
            reply_markup=MAIN_KEYBOARD
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")


def setup_job_queue(job_queue):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        job_queue: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    """
    if job_queue is None:
        logger.warning("JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(send_notifications, interval=60, first=10)
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def register(application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        application: —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    """
    notification_conversation = ConversationHandler(
        entry_points=[CommandHandler("notify", notify_command)],
        states={
            SELECTING_TIMEZONE: [CallbackQueryHandler(timezone_selected, pattern=r"^tz:")],
            TYPING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_entered)],
        },
        fallbacks=[CommandHandler("cancel", cancel_notify_command)],
        name=HANDLER_NAME,
        persistent=False,
    )

    application.add_handler(notification_conversation)

    application.add_handler(CommandHandler("cancel_notify", cancel_notify_command))
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.add_handler(CommandHandler("force_notify", force_notify_command))
    # application.add_handler(CommandHandler("admin_notify", admin_notify_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    application.add_handler(CallbackQueryHandler(notification_callback, pattern=r"^notify_"))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

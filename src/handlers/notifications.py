"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CommandHandler, ConversationHandler,
    CallbackQueryHandler
)

from src.utils.keyboards import MAIN_KEYBOARD
from src.data.storage import save_user, get_users_for_notification, has_entry_for_date
from src.utils.date_helpers import get_today, is_valid_time_format

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notify.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler.END
    """
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name

    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: /notify 09:00",
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
        time_str = context.args[0]

        if not is_valid_time_format(time_str):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–æ—Ç 00:00 –¥–æ 23:59).",
                reply_markup=MAIN_KEYBOARD
            )
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user(chat_id, username, first_name, notification_time=time_str)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ {time_str}")

        await update.message.reply_text(
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ {time_str} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
            "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ –¥–µ–Ω—å. "
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö "
            "–∑–∞–ø–∏—Å–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å).",
            reply_markup=MAIN_KEYBOARD
        )
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: /notify 09:00",
            reply_markup=MAIN_KEYBOARD
        )

    return ConversationHandler.END


async def cancel_notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel_notify.
    –û—Ç–º–µ–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler.END
    """
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ None
    save_user(chat_id, username, first_name, notification_time=None)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    await update.message.reply_text(
        "‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        reply_markup=MAIN_KEYBOARD
    )
    return ConversationHandler.END


async def send_notifications(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    Args:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    current_hour = datetime.now().hour
    current_minute = datetime.now().minute
    current_time = f"{current_hour:02d}:{current_minute:02d}"
    today = get_today()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    users_to_notify = get_users_for_notification(current_time)

    for user in users_to_notify:
        chat_id = user['chat_id']
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            has_entry_today = has_entry_for_date(chat_id, today)

            # –í—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if has_entry_today:
                message = (
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add, –∏–ª–∏ "
                    "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /recent."
                )
            else:
                message = (
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="notify_add")],
                [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="notify_stats")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_disable")]
            ]

            await context.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


async def notification_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.

    Args:
        update: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ callback query
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    action = query.data

    if action == "notify_add":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
        await query.message.reply_text(
            "–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel."
        )
        # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /add
        context.args = []
        from src.handlers.entry import start_entry
        await start_entry(update, context)

    elif action == "notify_stats":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
        await query.message.reply_text(
            "–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."
        )
        # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /stats
        from src.handlers.stats import stats
        await stats(update, context)

    elif action == "notify_disable":
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        save_user(chat_id, username, first_name, notification_time=None)

        await query.message.reply_text(
            "‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
            reply_markup=MAIN_KEYBOARD
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")


def setup_job_queue(job_queue):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        job_queue: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    """
    if job_queue is None:
        logger.warning("JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(send_notifications, interval=60, first=10)
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def register(application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        application: —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    """
    application.add_handler(CommandHandler("notify", notify_command))
    application.add_handler(CommandHandler("cancel_notify", cancel_notify_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    application.add_handler(CallbackQueryHandler(notification_callback, pattern=r"^notify_"))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
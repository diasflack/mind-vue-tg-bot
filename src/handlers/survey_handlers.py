"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.
–†–µ–∞–ª–∏–∑—É–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.
"""

import logging
import json
from datetime import datetime
from typing import Dict, Tuple
from telegram import Update
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler,
    MessageHandler, filters, Application
)

from src.config import SURVEY_ANSWER
from src.utils.keyboards import MAIN_KEYBOARD
from src.data.storage import _get_db_connection
from src.data.surveys_storage import (
    get_available_templates,
    get_template_by_name,
    get_template_questions,
    save_survey_response
)
from src.utils.conversation_manager import register_conversation, end_conversation

logger = logging.getLogger(__name__)

HANDLER_NAME = "survey_fill"


async def list_surveys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ - –∫–æ–º–∞–Ω–¥–∞ /surveys.
    """
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤")

    conn = _get_db_connection()
    templates = get_available_templates(conn, only_active=True)

    if not templates:
        await update.message.reply_text(
            "üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=MAIN_KEYBOARD
        )
        return

    message = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:\n\n"

    for template in templates:
        icon = template.get('icon', 'üìù')
        name = template['name']
        description = template.get('description', '')

        message += f"{icon} *{name}*\n"
        if description:
            message += f"_{description}_\n"
        message += f"–ó–∞–ø–æ–ª–Ω–∏—Ç—å: `/fill {name}`\n\n"

    message += "\nüí° –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/fill <–Ω–∞–∑–≤–∞–Ω–∏–µ>`"

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=MAIN_KEYBOARD
    )


async def start_fill_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ - –∫–æ–º–∞–Ω–¥–∞ /fill <–Ω–∞–∑–≤–∞–Ω–∏–µ>.
    """
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/fill –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫`\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys",
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END

    # –°–æ–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    survey_name = ' '.join(context.args)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ '{survey_name}'")

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –æ–ø—Ä–æ—Å–∞
    conn = _get_db_connection()
    template = get_template_by_name(conn, survey_name)

    if not template:
        await update.message.reply_text(
            f"‚ùå –û–ø—Ä–æ—Å '{survey_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys",
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —à–∞–±–ª–æ–Ω–∞
    questions = get_template_questions(conn, template['id'])

    if not questions:
        await update.message.reply_text(
            f"‚ùå –í –æ–ø—Ä–æ—Å–µ '{survey_name}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
    register_conversation(chat_id, HANDLER_NAME, SURVEY_ANSWER)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
    context.user_data['survey'] = {
        'template_id': template['id'],
        'template_name': template['name'],
        'questions': questions,
        'current_question': 0,
        'answers': {}
    }

    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await _ask_question(update, context, 0)

    return SURVEY_ANSWER


async def _ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_index: int):
    """
    –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    survey_data = context.user_data['survey']
    questions = survey_data['questions']

    if question_index >= len(questions):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
        await _complete_survey(update, context)
        return

    question = questions[question_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    message = f"üìù –í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(questions)}\n\n"
    message += f"*{question['question_text']}*\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if question.get('help_text'):
        message += f"üí° {question['help_text']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    question_type = question['question_type']

    if question_type == 'numeric':
        config = json.loads(question['config']) if question.get('config') else {}
        min_val = config.get('min', 0)
        max_val = config.get('max', 100)
        message += f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}"

    elif question_type == 'yes_no':
        message += "–û—Ç–≤–µ—Ç—å—Ç–µ: –¥–∞ / –Ω–µ—Ç (–∏–ª–∏ yes / no)"

    elif question_type == 'time':
        message += "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)"

    elif question_type == 'choice':
        config = json.loads(question['config']) if question.get('config') else {}
        options = config.get('options', [])
        if options:
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:\n"
            for i, option in enumerate(options, 1):
                message += f"{i}. {option}\n"
            if config.get('multiple'):
                message += "\n(–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)"

    elif question_type == 'text':
        message += "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –ø—Ä–æ skip
    if not question['is_required']:
        message += "\n\n_–í–æ–ø—Ä–æ—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: /skip_"

    message += "\n\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: /cancel"

    await update.message.reply_text(message, parse_mode='Markdown')


async def handle_survey_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞.
    """
    chat_id = update.effective_chat.id
    text = update.message.text

    survey_data = context.user_data.get('survey')
    if not survey_data:
        await update.message.reply_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /surveys",
            reply_markup=MAIN_KEYBOARD
        )
        return ConversationHandler.END

    current_index = survey_data['current_question']
    questions = survey_data['questions']
    question = questions[current_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º /skip
    if text == '/skip':
        if question['is_required']:
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ.",
                parse_mode='Markdown'
            )
            return SURVEY_ANSWER
        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–æ–ø—Ä–æ—Å {question['id']}")
            survey_data['current_question'] += 1
            await _ask_question(update, context, survey_data['current_question'])
            return SURVEY_ANSWER

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    is_valid, error_message = _validate_answer(text, question)

    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {error_message}",
            parse_mode='Markdown'
        )
        return SURVEY_ANSWER

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    survey_data['answers'][str(question['id'])] = text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å {question['id']}: {text}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    survey_data['current_question'] += 1

    if survey_data['current_question'] < len(questions):
        await _ask_question(update, context, survey_data['current_question'])
        return SURVEY_ANSWER
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        await _complete_survey(update, context)
        return ConversationHandler.END


def _validate_answer(text: str, question: Dict) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.

    Returns:
        (is_valid, error_message): –∫–æ—Ä—Ç–µ–∂ —Å —Ñ–ª–∞–≥–æ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    """
    question_type = question['question_type']

    if question_type == 'numeric':
        try:
            value = float(text)
            config = json.loads(question['config']) if question.get('config') else {}
            min_val = config.get('min', 0)
            max_val = config.get('max', 100)

            if value < min_val or value > max_val:
                return False, f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {min_val} –¥–æ {max_val}"

            return True, ""
        except ValueError:
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"

    elif question_type == 'yes_no':
        normalized = text.lower().strip()
        if normalized not in ['–¥–∞', '–Ω–µ—Ç', 'yes', 'no']:
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' (–∏–ª–∏ 'yes'/'no')"
        return True, ""

    elif question_type == 'time':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
        import re
        if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', text):
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)"
        return True, ""

    elif question_type == 'choice':
        config = json.loads(question['config']) if question.get('config') else {}
        options = config.get('options', [])

        if not options:
            return True, ""  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—Ü–∏–π, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –æ—Ç–≤–µ—Ç

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            choices = [c.strip() for c in text.split(',')]
            for choice in choices:
                choice_num = int(choice)
                if choice_num < 1 or choice_num > len(options):
                    return False, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(options)}"
            return True, ""
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if text in options:
                return True, ""
            return False, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(options)})"

    elif question_type == 'text':
        if not text or len(text.strip()) == 0:
            return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
        return True, ""

    elif question_type == 'scale':
        # Scale —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ numeric
        return _validate_answer(text, {**question, 'question_type': 'numeric'})

    return True, ""


async def _complete_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã.
    """
    chat_id = update.effective_chat.id
    survey_data = context.user_data['survey']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    now = datetime.now()
    response_data = {
        'chat_id': chat_id,
        'template_id': survey_data['template_id'],
        'response_date': now.strftime('%Y-%m-%d'),
        'response_time': now.strftime('%H:%M:%S'),
        'answers': survey_data['answers']
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = _get_db_connection()
    success = save_survey_response(conn, response_data)

    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
        message = f"‚úÖ –û–ø—Ä–æ—Å *{survey_data['template_name']}* –∑–∞–ø–æ–ª–Ω–µ–Ω!\n\n"
        message += f"üìÖ {now.strftime('%d.%m.%Y')}\n"
        message += f"‚è∞ {now.strftime('%H:%M')}\n"
        message += f"üìä –û—Ç–≤–µ—Ç–æ–≤: {len(survey_data['answers'])}\n\n"
        message += "–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üôè"

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=MAIN_KEYBOARD
        )

        logger.info(f"–û–ø—Ä–æ—Å {survey_data['template_id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=MAIN_KEYBOARD
        )
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    end_conversation(chat_id, HANDLER_NAME)
    if 'survey' in context.user_data:
        context.user_data.pop('survey')


async def cancel_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.
    """
    chat_id = update.effective_chat.id
    logger.info(f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    end_conversation(chat_id, HANDLER_NAME)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'survey' in context.user_data:
        context.user_data.pop('survey')

    await update.message.reply_text(
        "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=MAIN_KEYBOARD
    )

    return ConversationHandler.END


# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
survey_conversation_handler = ConversationHandler(
    entry_points=[
        CommandHandler('fill', start_fill_survey)
    ],
    states={
        SURVEY_ANSWER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_survey_answer)
        ]
    },
    fallbacks=[
        CommandHandler('cancel', cancel_survey)
    ],
    name=HANDLER_NAME
)


def register(application: Application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    application.add_handler(CommandHandler('surveys', list_surveys))
    application.add_handler(survey_conversation_handler)

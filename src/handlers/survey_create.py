"""
Handlers –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ (Phase 3.1).

–ö–æ–º–∞–Ω–¥—ã:
- /create_survey - –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
- /my_surveys - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤
"""

import logging
from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters
)

from src.config import CREATE_SURVEY_NAME, CREATE_SURVEY_DESC
from src.data.storage import _get_db_connection
from src.data.surveys_storage import (
    create_user_template,
    get_user_templates,
    count_user_templates,
    get_template_questions
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_TEMPLATES = 20
MIN_NAME_LENGTH = 3
MAX_NAME_LENGTH = 50
MAX_DESCRIPTION_LENGTH = 500


async def create_survey_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ - /create_survey.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ.
    """
    chat_id = update.effective_chat.id

    try:
        conn = _get_db_connection()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤)
        count = count_user_templates(conn, chat_id)

        if count >= MAX_TEMPLATES:
            await update.message.reply_text(
                f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ ({MAX_TEMPLATES}).\n\n"
                f"–£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é /delete_survey, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
            )
            return ConversationHandler.END

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await update.message.reply_text(
            f"üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞*\n\n"
            f"–£ –≤–∞—Å {count}/{MAX_TEMPLATES} –æ–ø—Ä–æ—Å–æ–≤.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ({MIN_NAME_LENGTH}-{MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            f"_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_",
            parse_mode='Markdown'
        )

        return CREATE_SURVEY_NAME

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –æ–ø—Ä–æ—Å–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def receive_survey_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ.
    """
    chat_id = update.effective_chat.id
    name = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(name) < MIN_NAME_LENGTH:
        await update.message.reply_text(
            f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n"
            f"–ú–∏–Ω–∏–º—É–º {MIN_NAME_LENGTH} —Å–∏–º–≤–æ–ª–∞."
        )
        return CREATE_SURVEY_NAME

    if len(name) > MAX_NAME_LENGTH:
        await update.message.reply_text(
            f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return CREATE_SURVEY_NAME

    try:
        conn = _get_db_connection()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        existing = get_user_templates(conn, chat_id)
        if any(t['name'] == name for t in existing):
            await update.message.reply_text(
                f"‚ùå –û–ø—Ä–æ—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º *{name}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                parse_mode='Markdown'
            )
            return CREATE_SURVEY_NAME

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['survey_name'] = name

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: *{name}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            f"_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_",
            parse_mode='Markdown'
        )

        return CREATE_SURVEY_DESC

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def receive_survey_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –≤ –ë–î.
    """
    chat_id = update.effective_chat.id
    description = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if 'survey_name' not in context.user_data:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç survey_name –≤ context.user_data")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —Å /create_survey"
        )
        return ConversationHandler.END

    name = context.user_data['survey_name']

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
    if len(description) > MAX_DESCRIPTION_LENGTH:
        await update.message.reply_text(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return CREATE_SURVEY_DESC

    try:
        conn = _get_db_connection()

        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template_id = create_user_template(conn, chat_id, name, description)

        if template_id is None:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç."
            )
            return ConversationHandler.END

        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        await update.message.reply_text(
            f"‚úÖ *–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!*\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–æ–∫–∞ *–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω*.\n\n"
            f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"/add_question {name}\n\n"
            f"–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            f"/activate_survey {name}\n\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –æ–ø—Ä–æ—Å–æ–≤: /my_surveys",
            parse_mode='Markdown'
        )

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('survey_name', None)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def show_my_surveys(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ - /my_surveys.
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    chat_id = update.effective_chat.id

    try:
        conn = _get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        templates = get_user_templates(conn, chat_id)

        if not templates:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é /create_survey"
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
        active_templates = [t for t in templates if t['is_active']]
        inactive_templates = [t for t in templates if not t['is_active']]

        message_parts = [f"üìã *–í–∞—à–∏ –æ–ø—Ä–æ—Å—ã ({len(templates)}/{MAX_TEMPLATES}):*\n"]

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
        if active_templates:
            message_parts.append("\n‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ:*")
            for template in active_templates:
                questions = get_template_questions(conn, template['id'])
                question_count = len(questions)

                message_parts.append(
                    f"\n‚Ä¢ *{template['name']}*"
                    f"\n  üìÑ {template['description']}"
                    f"\n  ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}"
                )

        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
        if inactive_templates:
            message_parts.append("\n\n‚è∏ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ:*")
            for template in inactive_templates:
                questions = get_template_questions(conn, template['id'])
                question_count = len(questions)

                message_parts.append(
                    f"\n‚Ä¢ *{template['name']}*"
                    f"\n  üìÑ {template['description']}"
                    f"\n  ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}"
                )

        message_parts.append(
            "\n\n_–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏:_\n"
            "/edit_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            "/delete_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —É–¥–∞–ª–∏—Ç—å\n"
            "/activate_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n"
            "/deactivate_survey <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        )

        await update.message.reply_text(
            '\n'.join(message_parts),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def cancel_create_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
    """
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('survey_name', None)

    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )

    return ConversationHandler.END


def register(application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.
    """
    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    create_survey_conv = ConversationHandler(
        entry_points=[CommandHandler('create_survey', create_survey_start)],
        states={
            CREATE_SURVEY_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_survey_name)
            ],
            CREATE_SURVEY_DESC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_survey_description)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_create_survey)],
        name="create_survey_conversation",
        persistent=False
    )

    application.add_handler(create_survey_conv)

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('my_surveys', show_my_surveys))

    logger.info("Survey creation handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

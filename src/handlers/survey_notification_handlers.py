"""
Handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –ø–æ –æ–ø—Ä–æ—Å–∞–º (Phase 5.2).

–ö–æ–º–∞–Ω–¥—ã:
- /survey_reminders - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
- /set_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
- /remove_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
"""

import logging
import re
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from src.data.storage import _get_db_connection
from src.data.survey_notifications_storage import (
    set_survey_reminder,
    remove_survey_reminder,
    get_survey_reminders
)
from src.data.surveys_storage import get_template_by_name

logger = logging.getLogger(__name__)


def _validate_time_format(time_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM.

    Args:
        time_str: —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏

    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    pattern = r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
    return bool(re.match(pattern, time_str))


def _get_user_timezone(conn, chat_id: int) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        conn: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        int: —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    """
    cursor = conn.cursor()
    cursor.execute('SELECT timezone_offset FROM users WHERE chat_id = ?', (chat_id,))
    row = cursor.fetchone()
    return row[0] if row and row[0] is not None else 0


async def survey_reminders_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - /survey_reminders.
    """
    chat_id = update.effective_chat.id

    try:
        conn = _get_db_connection()
        reminders = get_survey_reminders(conn, chat_id)

        if not reminders:
            await update.message.reply_text(
                "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –æ–ø—Ä–æ—Å–∞–º.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/set_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/set_survey_reminder –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 09:00"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        timezone = _get_user_timezone(conn, chat_id)
        message = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –æ–ø—Ä–æ—Å–∞–º:\n\n"

        enabled_count = 0
        for reminder in reminders:
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if reminder['notification_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ
            if reminder['notification_time']:
                from src.data.survey_notifications_storage import _convert_time_from_utc
                local_time = _convert_time_from_utc(reminder['notification_time'], timezone)
            else:
                local_time = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            message += f"üìä **{reminder['survey_name']}**\n"
            message += f"   –í—Ä–µ–º—è: {local_time}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"

            if reminder['notification_enabled']:
                enabled_count += 1

        message += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {enabled_count}\n\n"
        message += "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
        message += "‚Ä¢ /set_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è>\n"
        message += "‚Ä¢ /remove_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ>"

        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )


async def set_reminder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ - /set_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è>.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        <–Ω–∞–∑–≤–∞–Ω–∏–µ>: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        <–≤—Ä–µ–º—è>: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    """
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/set_survey_reminder –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 09:00\n"
            '/set_survey_reminder "–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–≤–æ–≥–∏" 20:00'
        )
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ –≤—Ä–µ–º—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    notification_time = context.args[-1]
    survey_name = ' '.join(context.args[:-1])

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if not _validate_time_format(notification_time):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 20:30)"
        )
        return

    try:
        conn = _get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø—Ä–æ—Å–∞
        template = get_template_by_name(conn, survey_name)
        if not template:
            await update.message.reply_text(
                f"‚ùå –û–ø—Ä–æ—Å '{survey_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys"
            )
            return

        template_id = template['id']

        # –ü–æ–ª—É—á–∞–µ–º timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timezone = _get_user_timezone(conn, chat_id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        success = set_survey_reminder(
            conn,
            chat_id=chat_id,
            template_id=template_id,
            notification_time=notification_time,
            timezone_offset=timezone
        )

        if success:
            await update.message.reply_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üìä –û–ø—Ä–æ—Å: {survey_name}\n"
                f"‚è∞ –í—Ä–µ–º—è: {notification_time}\n\n"
                f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, "
                f"–µ—Å–ª–∏ –æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ '{survey_name}' –Ω–∞ {notification_time}")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        )


async def remove_reminder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ - /remove_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ>.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        <–Ω–∞–∑–≤–∞–Ω–∏–µ>: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    """
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) < 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_survey_reminder <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/remove_survey_reminder –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
        )
        return

    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    survey_name = ' '.join(context.args)

    try:
        conn = _get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø—Ä–æ—Å–∞
        template = get_template_by_name(conn, survey_name)
        if not template:
            await update.message.reply_text(
                f"‚ùå –û–ø—Ä–æ—Å '{survey_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: /surveys"
            )
            return

        template_id = template['id']

        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        success = remove_survey_reminder(conn, chat_id=chat_id, template_id=template_id)

        if success:
            await update.message.reply_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!\n\n"
                f"üìä –û–ø—Ä–æ—Å: {survey_name}\n\n"
                f"–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ '{survey_name}'")
        else:
            await update.message.reply_text(
                f"‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ '{survey_name}' –Ω–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: /survey_reminders"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        )


async def send_survey_notifications(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø—Ä–æ—Å–∞—Ö.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É).

    Args:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    from datetime import datetime
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    current_hour = datetime.now().hour
    current_minute = datetime.now().minute
    current_time = f"{current_hour:02d}:{current_minute:02d}"

    try:
        conn = _get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        from src.data.survey_notifications_storage import (
            get_surveys_for_notification,
            is_survey_filled_today
        )

        surveys = get_surveys_for_notification(conn, current_time)

        for survey in surveys:
            chat_id = survey['chat_id']
            template_id = survey['template_id']
            survey_name = survey['survey_name']

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
                is_filled = is_survey_filled_today(conn, chat_id, template_id)

                if is_filled:
                    # –û–ø—Ä–æ—Å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    logger.debug(f"–û–ø—Ä–æ—Å '{survey_name}' —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                    f"–ü–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–æ—Å **{survey_name}**.\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /fill_survey {survey_name} –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."
                )

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                keyboard = [
                    [InlineKeyboardButton(f"üìä –ó–∞–ø–æ–ª–Ω–∏—Ç—å '{survey_name}'", callback_data=f"fill_survey:{template_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"disable_reminder:{template_id}")]
                ]

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )

                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø—Ä–æ—Å–µ '{survey_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –æ–± –æ–ø—Ä–æ—Å–µ '{survey_name}': {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø—Ä–æ—Å–∞—Ö: {e}")


def setup_job_queue(job_queue) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø—Ä–æ—Å–∞—Ö.

    Args:
        job_queue: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    """
    if job_queue is None:
        logger.warning("JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø—Ä–æ—Å–∞—Ö –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(send_survey_notifications, interval=60, first=10)
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø—Ä–æ—Å–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def register(application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    application.add_handler(CommandHandler('survey_reminders', survey_reminders_handler))
    application.add_handler(CommandHandler('set_survey_reminder', set_reminder_handler))
    application.add_handler(CommandHandler('remove_survey_reminder', remove_reminder_handler))

    logger.info("Survey notification handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

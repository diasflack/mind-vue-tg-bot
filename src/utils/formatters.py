"""
–ú–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
"""

import pandas as pd
from typing import Dict, Any, List, Optional
import sqlite3
from src.utils.date_helpers import format_date


def enrich_entries_with_impressions(
    entries: List[Dict[str, Any]],
    chat_id: int,
    conn: Optional[sqlite3.Connection] = None
) -> List[Dict[str, Any]]:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏.

    Args:
        entries: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        List[Dict]: –∑–∞–ø–∏—Å–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º 'impressions'
    """
    if not entries or not conn:
        return entries

    try:
        from src.data.impressions_storage import get_entry_impressions

        enriched_entries = []
        for entry in entries:
            entry_copy = entry.copy()
            # –ü–æ–ª—É—á–∞–µ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            impressions = get_entry_impressions(conn, chat_id, entry['date'])
            entry_copy['impressions'] = impressions
            enriched_entries.append(entry_copy)

        return enriched_entries

    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        return entries


def format_entry_summary(entry: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        entry: –∑–∞–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–ø–∏—Å–∏
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–î–î.–ú–ú.–ì–ì–ì–ì)
    formatted_date = format_date(entry['date'])

    summary = f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞!\n\n"
    summary += f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
    summary += f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {entry['mood']}/10\n"
    summary += f"üò¥ –°–æ–Ω: {entry['sleep']}/10\n"

    if entry.get('comment'):
        summary += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {entry['comment']}\n"

    summary += f"‚öñÔ∏è –†–æ–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {entry['balance']}/10\n"
    summary += f"üîÜ –ú–∞–Ω–∏—è: {entry['mania']}/10\n"
    summary += f"üòû –î–µ–ø—Ä–µ—Å—Å–∏—è: {entry['depression']}/10\n"
    summary += f"üò∞ –¢—Ä–µ–≤–æ–≥–∞: {entry['anxiety']}/10\n"
    summary += f"üò† –†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {entry['irritability']}/10\n"
    summary += f"üìä –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {entry['productivity']}/10\n"
    summary += f"üëã –û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {entry['sociability']}/10\n"

    return summary


def format_stats_summary(entries_df: pd.DataFrame) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å—è–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        entries_df: DataFrame —Å –∑–∞–ø–∏—Å—è–º–∏

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    numeric_columns = ['mood', 'sleep', 'balance', 'mania',
                       'depression', 'anxiety', 'irritability',
                       'productivity', 'sociability']

    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for col in numeric_columns:
        if col in entries_df.columns:
            col_data = pd.to_numeric(entries_df[col], errors='coerce')
            if not col_data.isna().all():
                avg = col_data.mean()
                stats_text += f"{get_column_name(col)}: —Å—Ä–µ–¥–Ω–µ–µ = {avg:.2f}/10\n"

    stats_text += f"\nüìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(entries_df)}"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    if 'date' in entries_df.columns and len(entries_df) > 0:
        start_date = pd.to_datetime(entries_df['date']).min().strftime('%d.%m.%Y')
        end_date = pd.to_datetime(entries_df['date']).max().strftime('%d.%m.%Y')
        stats_text += f"\nüìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}"

    return stats_text


def get_column_name(column: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞.

    Args:
        column: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    Returns:
        str: —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    """
    column_names = {
        'mood': 'üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        'sleep': 'üò¥ –°–æ–Ω',
        'balance': '‚öñÔ∏è –†–æ–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
        'mania': 'üîÜ –ú–∞–Ω–∏—è',
        'depression': 'üòû –î–µ–ø—Ä–µ—Å—Å–∏—è',
        'anxiety': 'üò∞ –¢—Ä–µ–≤–æ–≥–∞',
        'irritability': 'üò† –†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'productivity': 'üìä –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å',
        'sociability': 'üëã –û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    }

    return column_names.get(column, column)


def _format_comment_preview(comment: str, max_length: int = 50) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã.

    Args:
        comment: —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        max_length: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    """
    if len(comment) > max_length:
        return comment[:max_length - 3] + "..."
    return comment


def _format_single_entry(entry: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        entry: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏

    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–î–î.–ú–ú.–ì–ì–ì–ì)
    formatted_date = format_date(entry['date'])

    result = f"üìÖ {formatted_date}\n"
    result += f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {entry['mood']}/10\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if entry.get('comment'):
        comment_preview = _format_comment_preview(entry['comment'])
        result += f"üí¨ {comment_preview}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–Ω, —Ç—Ä–µ–≤–æ–≥—É –∏ –¥–µ–ø—Ä–µ—Å—Å–∏—é (–∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
    result += f"üò¥ –°–æ–Ω: {entry['sleep']}/10\n"
    result += f"üò∞ –¢—Ä–µ–≤–æ–≥–∞: {entry['anxiety']}/10\n"
    result += f"üòû –î–µ–ø—Ä–µ—Å—Å–∏—è: {entry['depression']}/10\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if entry.get('impressions'):
        impressions = entry['impressions']
        result += f"\nüí≠ –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π: {len(impressions)}\n"
        for imp in impressions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
            category_emoji = {'positive': 'üòä', 'negative': 'üòû', 'neutral': 'üòê'}.get(imp.get('category'), 'üí≠')
            text_preview = imp['text'][:40] + '...' if len(imp['text']) > 40 else imp['text']
            result += f"  {category_emoji} {text_preview} (ID: {imp['id']})\n"
        if len(impressions) > 3:
            result += f"  ... –∏ –µ—â–µ {len(impressions) - 3}\n"

    result += "-------------------\n\n"

    return result


def format_entry_list(entries: List[Dict[str, Any]], max_entries: int = 5) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        entries: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_entries: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    """
    if not entries:
        return "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    try:
        sorted_entries = sorted(entries, key=lambda x: x['date'], reverse=True)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        sorted_entries = entries

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
    display_entries = sorted_entries[:max_entries]

    result = f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(display_entries)} –∑–∞–ø–∏—Å–µ–π:\n\n"

    for entry in display_entries:
        try:
            result += _format_single_entry(entry)
        except Exception:
            # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–µ
            continue

    if len(sorted_entries) > max_entries:
        result += f"\n–ò –µ—â–µ {len(sorted_entries) - max_entries} –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /download –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞."

    return result